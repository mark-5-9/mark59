
-- *************************************************************************************
-- **
-- **   from 5.0 to 5.1   
-- **
-- **   THIS IS AN OPTIONAL CHANGE  
-- **   --------------------------
-- **   Loads an improved version of the New Relic Sample script into mark59metricsdb 
-- **
-- *************************************************************************************

SET SQL_SAFE_UPDATES = 0;

-- *************************************************************************************
--  Row updates for the mark59metricsdb  tables
-- *************************************************************************************

DELETE FROM mark59metricsdb.SERVERPROFILES WHERE SERVER_PROFILE_NAME = 'NewRelicTestProfile';
INSERT INTO mark59metricsdb.SERVERPROFILES VALUES ('NewRelicSampleProfile','GROOVY_SCRIPT',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'supplied sample New Relic API groovy script','{\"proxyPort\":\"proxyPort\",\"newRelicXapiKey\":\"newRelicXapiKey\",\"proxyServer\":\"proxyServer\",\"newRelicApiAppId\":\"newRelicApiAppId\"}');

DELETE FROM mark59metricsdb.SERVERCOMMANDLINKS WHERE SERVER_PROFILE_NAME = 'NewRelicTestProfile';
INSERT INTO mark59metricsdb.SERVERCOMMANDLINKS VALUES ('NewRelicSampleProfile','NewRelicSampleCmd');

DELETE FROM mark59metricsdb.COMMANDS WHERE COMMAND_NAME = 'NewRelicSampleCmd';
INSERT INTO mark59metricsdb.COMMANDS VALUES ('NewRelicSampleCmd','GROOVY_SCRIPT','import java.net.InetSocketAddress;\r\nimport java.net.Proxy;\r\nimport java.time.ZoneOffset;\r\nimport java.time.ZonedDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\nimport com.mark59.metrics.pojos.ParsedMetric;\r\nimport com.mark59.metrics.pojos.ScriptResponse;\r\nimport okhttp3.Headers;\r\nimport okhttp3.OkHttpClient;\r\nimport okhttp3.Request;\r\nimport okhttp3.Response;\r\n\r\nString newRelicApiUrl = \"https://api.newrelic.com/v2/applications/\";\r\nString url = newRelicApiUrl + newRelicApiAppId + \"/hosts.json\";\r\nScriptResponse scriptResponse = new ScriptResponse();\r\nList<ParsedMetric> parsedMetrics = new ArrayList<ParsedMetric>();\r\n\r\nRequest request; Response response = null; JSONObject jsonResponse = null;\r\nProxy proxy = StringUtils.isNotBlank(proxyServer + proxyPort) ? new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyServer , new Integer(proxyPort))) : null;\r\nOkHttpClient client = proxy != null ? new OkHttpClient.Builder().proxy(proxy).build() : new OkHttpClient();\r\nHeaders headers = new Headers.Builder().add(\"X-Api-Key\", newRelicXapiKey).add(\"Content-Type\", \"application/json\").build();\r\nString debugJsonResponses =  \"running profile \" + serverProfile.serverProfileName + \", init req : \" + url ;\r\n\r\ntry {\r\n	request = new Request.Builder().url(url).headers(headers).get().   build();\r\n	response = client.newCall(request).execute();\r\n	jsonResponse = new JSONObject(response.body().string());\r\n	debugJsonResponses =  debugJsonResponses + \"<br>init res.: \" + jsonResponse.toString();\r\n\r\n	ZonedDateTime utcTimeNow = ZonedDateTime.now(ZoneOffset.UTC);\r\n	String toHour 	= String.format(\"%02d\", utcTimeNow.getHour());\r\n	String toMinute	= String.format(\"%02d\", utcTimeNow.getMinute());\r\n	ZonedDateTime utcMinus1Min = utcTimeNow.minusMinutes(1);\r\n	String fromHour	= String.format(\"%02d\", utcMinus1Min.getHour());\r\n	String fromMinute = String.format(\"%02d\", utcMinus1Min.getMinute());\r\n	String fromDate = utcMinus1Min.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n	String toDate 	= utcTimeNow.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n	String urlDateRangeParmStr = \"&from=\" + fromDate + \"T\" + fromHour + \"%3A\" + fromMinute + \"%3A00%2B00%3A00\" + \"&to=\" + toDate + \"T\" + toHour + \"%3A\" + toMinute + \"%3A00%2B00%3A00\";\r\n\r\n	JSONArray application_hosts = jsonResponse.getJSONArray(\"application_hosts\");\r\n\r\n	for (int i = 0; i < application_hosts.length(); i++) {\r\n		JSONObject application_host = (JSONObject) application_hosts.get(i);\r\n		Integer hostId = (Integer) application_host.get(\"id\");\r\n		String hostName = ((String)application_host.get(\"host\")).replace(\":\",\"_\");\r\n		url = newRelicApiUrl + newRelicApiAppId  + \"/hosts/\" + hostId + \"/metrics/data.json?names%5B%5D=Memory/Heap/Used&names%5B%5D=CPU/User Time&names%5B%5D=Memory/Physical\" + urlDateRangeParmStr;\r\n		debugJsonResponses =  debugJsonResponses + \"<br><br>req.\" + i + \": \" + url ;\r\n\r\n		request = new Request.Builder().url(url).headers(headers).get().build();\r\n		response = client.newCall(request).execute();\r\n		jsonResponse = new JSONObject(response.body().string());\r\n		debugJsonResponses =  debugJsonResponses + \"<br>res.\" + i + \": \" + jsonResponse.toString();\r\n\r\n		Number memoryMetric = -1.0;\r\n		memoryMetric =  (Number)((JSONObject)((JSONObject)jsonResponse.getJSONObject(\"metric_data\").getJSONArray(\"metrics\").get(0)).getJSONArray(\"timeslices\").get(0)).getJSONObject(\"values\").get(\"used_mb_by_host\") ;\r\n		parsedMetrics.add(new ParsedMetric(\"MEMORY_HEAP_USED_MB_\" + hostName, memoryMetric, \"MEMORY\"));\r\n\r\n		Number cpuMetric = -1.0;\r\n		cpuMetric = (Number)((JSONObject)((JSONObject)jsonResponse.getJSONObject(\"metric_data\").getJSONArray(\"metrics\").get(1)).getJSONArray(\"timeslices\").get(0)).getJSONObject(\"values\").get(\"percent\");\r\n		parsedMetrics.add(new ParsedMetric(\"CPU_USER_TIME_%_\" + hostName, cpuMetric, \"CPU_UTIL\"));\r\n	}\r\n} catch (Exception e) {\r\n	debugJsonResponses =  debugJsonResponses + \"<br>\\n ERROR :  Exception last url: \" + url + \", response of  : \" + jsonResponse + \", message: \"+ e.getMessage();\r\n}\r\nscriptResponse.setCommandLog(debugJsonResponses);\r\nscriptResponse.setParsedMetrics(parsedMetrics);\r\nreturn scriptResponse;','N','NewRelic Supplied Sample','[\"newRelicApiAppId\",\"newRelicXapiKey\",\"proxyServer\",\"proxyPort\"]');
