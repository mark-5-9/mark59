
-- DROP DATABASE IF EXISTS mark59metricsdb;
CREATE DATABASE mark59metricsdb CHARACTER SET utf8mb4  COLLATE utf8mb4_bin; 

USE mark59metricsdb;


-- PLEASE RUN  "MYSQLcreateAdminUser.sql"  TO CREATE THE 'ADMIN' USER IF YOU HAVE NOT ALREADY DONE SO.  

-- Note that character set utf8mb4 is the default from MySQL 8.0.
-- The collation for the database is set to utf8mb4_bin
-- Useful as is allows for stuff like case-sensitive eventmapping matching.  Also aligns H2 database and Java case sensitive sorting.           


-- create tables  -- 


CREATE TABLE IF NOT EXISTS SERVERPROFILES  (
   SERVER_PROFILE_NAME  varchar(64)   NOT NULL,
   EXECUTOR             varchar(32)   NOT NULL,   
   SERVER               varchar(64)   DEFAULT '',
   ALTERNATE_SERVER_ID  varchar(64)   DEFAULT '',
   USERNAME             varchar(64)   DEFAULT '',
   PASSWORD             varchar(64)   DEFAULT '',
   PASSWORD_CIPHER      varchar(64)   DEFAULT '',
   CONNECTION_PORT      varchar(8)    DEFAULT '',
   CONNECTION_TIMEOUT   varchar(8)    DEFAULT '',
   COMMENT              varchar(128)  DEFAULT NULL,
   PARAMETERS           varchar(8196) DEFAULT NULL,   
  PRIMARY KEY ( SERVER_PROFILE_NAME )
); 


CREATE TABLE IF NOT EXISTS COMMANDS  (
   COMMAND_NAME    varchar(64)   NOT NULL,
   EXECUTOR        varchar(32)   NOT NULL,
   COMMAND         MEDIUMTEXT    NOT NULL,
   IGNORE_STDERR   varchar(1)    DEFAULT NULL,
   COMMENT         varchar(128)  DEFAULT NULL,
   PARAM_NAMES     varchar(1000) DEFAULT NULL,   
  PRIMARY KEY ( COMMAND_NAME )
); 


CREATE TABLE IF NOT EXISTS SERVERCOMMANDLINKS  (
   SERVER_PROFILE_NAME  varchar(64) NOT NULL,
   COMMAND_NAME  varchar(64) NOT NULL,
  PRIMARY KEY ( SERVER_PROFILE_NAME , COMMAND_NAME )
);


CREATE TABLE IF NOT EXISTS COMMANDRESPONSEPARSERS  (
   PARSER_NAME  varchar(64) NOT NULL,
   METRIC_TXN_TYPE  varchar(64) NOT NULL,
   METRIC_NAME_SUFFIX  varchar(64) NOT NULL,
   SCRIPT  MEDIUMTEXT NOT NULL,
   COMMENT  varchar(1024) NOT NULL,
   SAMPLE_COMMAND_RESPONSE  varchar(8196) NOT NULL,
  PRIMARY KEY ( PARSER_NAME )
); 


CREATE TABLE IF NOT EXISTS COMMANDPARSERLINKS  (
   COMMAND_NAME  varchar(64) NOT NULL,
   PARSER_NAME  varchar(64) NOT NULL,
  PRIMARY KEY ( COMMAND_NAME , PARSER_NAME )
); 


-- populate with initial data  -- 

INSERT INTO `SERVERPROFILES` VALUES ('DemoLINUX-DataHunterPlaywrightDeployAndExecute','SSH_LINUX_UNIX','localhost','','','','','22','60000','',NULL);
INSERT INTO `SERVERPROFILES` VALUES ('DemoLINUX-DataHunterSeleniumDeployAndExecute','SSH_LINUX_UNIX','localhost','','','','','22','60000','',NULL);
INSERT INTO `SERVERPROFILES` VALUES ('DemoLINUX-DataHunterTestGenJmeterReport','SSH_LINUX_UNIX','localhost','','','','','22','60000','Reports generated at   ~/Mark59_Runs/Jmeter_Reports/DataHunter/   <br>(open each index.html)   ',NULL);
INSERT INTO `SERVERPROFILES` VALUES ('DemoLINUX-DataHunterTestTrendsLoad','SSH_LINUX_UNIX','localhost','','','','','22','60000','Loads Trend Analysis (MYSQL database).  See:<br>http://localhost:8083/mark59-trends/trending?reqApp=DataHunter',NULL);
INSERT INTO `SERVERPROFILES` VALUES ('DemoWIN-DataHunterPlaywrightDeployAndExecute','POWERSHELL_WINDOWS','localhost','','','','',NULL,NULL,'','{}');
INSERT INTO `SERVERPROFILES` VALUES ('DemoWIN-DataHunterSeleniumDeployAndExecute','POWERSHELL_WINDOWS','localhost','','','','',NULL,NULL,'','{}');
INSERT INTO `SERVERPROFILES` VALUES ('DemoWIN-DataHunterTestGenJmeterReport','POWERSHELL_WINDOWS','localhost','','','','',NULL,NULL,'Hint - in browser open this URL and go to each index.html: file:///C:/Mark59_Runs/Jmeter_Reports/DataHunter/','{}');
INSERT INTO `SERVERPROFILES` VALUES ('DemoWIN-DataHunterTestTrendsLoad','POWERSHELL_WINDOWS','localhost','','','','',NULL,NULL,'Loads Trend Analysis (MYSQL database). See: <br>http://localhost:8083/mark59-trends/trending?reqApp=DataHunter','{\"DATABASE\":\"MYSQL\"}');
INSERT INTO `SERVERPROFILES` VALUES ('localhost_LINUX','SSH_LINUX_UNIX','localhost','','','','','22','60000','',NULL);
INSERT INTO `SERVERPROFILES` VALUES ('localhost_WINDOWS','POWERSHELL_WINDOWS','localhost','','','','',NULL,NULL,'','{\"SECURE_KEY_ARRAY\":\"\",\"SECURE_STRING_TXT\":\"\"}');
INSERT INTO `SERVERPROFILES` VALUES ('localhost_WINDOWS_HOSTID','POWERSHELL_WINDOWS','localhost','HOSTID','','','',NULL,NULL,'\'HOSTID\' will be subed with computername','{\"SECURE_KEY_ARRAY\":\"\",\"SECURE_STRING_TXT\":\"\"}');
INSERT INTO `SERVERPROFILES` VALUES ('remoteLinuxServer','SSH_LINUX_UNIX','LinuxServerName','','userid','encryptMe','','22','60000','',NULL);
INSERT INTO `SERVERPROFILES` VALUES ('remoteLinuxServerViaSSH','SSH_LINUX_UNIX','LinuxServerName','','userid','','','22','60000','no entry for password','{\"SSH_IDENTITY\":\"full filename of the private key.  Note the key needs to be in Classic OpenSSH format (-m PEM). See overview. \",\"SSH_PASSPHRASE\":\"remove this param or leave blank if there is no passphrase\"}');
INSERT INTO `SERVERPROFILES` VALUES ('remoteUnixVM','SSH_LINUX_UNIX','UnixVMName','','userid','encryptMe','','22','60000','',NULL);
INSERT INTO `SERVERPROFILES` VALUES ('remoteWinServer_WMIC','WMIC_WINDOWS','WinServerName','','userid','password','',NULL,NULL,'','{}');
INSERT INTO `SERVERPROFILES` VALUES ('NewRelicSampleProfile','GROOVY_SCRIPT',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'supplied sample New Relic API groovy script','{\"proxyPort\":\"proxyPort\",\"newRelicXapiKey\":\"newRelicXapiKey\",\"proxyServer\":\"proxyServer\",\"newRelicApiAppId\":\"newRelicApiAppId\",\"parm1\":\"extraUnusedParm\"}');
INSERT INTO `SERVERPROFILES` VALUES ('SimpleScriptSampleRunner','GROOVY_SCRIPT',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'runs a supplied, basic groovy script sample','{\"parm4\":\"uused\",\"parm1\":\"44\",\"parm2\":\"55.7\",\"parm3\":\"444\"}');
INSERT INTO `SERVERPROFILES` VALUES ('localhost_WMIC_WINDOWS','WMIC_WINDOWS','localhost','','','','',NULL,NULL,'','{}');
INSERT INTO `SERVERPROFILES` VALUES ('localhost_WMIC_WINDOWS_HOSTID','WMIC_WINDOWS','localhost','HOSTID','','','',NULL,NULL,'\'HOSTID\' will be subed <br> with computername  ','{}');
INSERT INTO `SERVERPROFILES` VALUES ('remoteWinServer_pwd','POWERSHELL_WINDOWS','WinServerName','','userid','password','',NULL,NULL,'win connect via user pwd','{\"SECURE_KEY_ARRAY\":\"\",\"SECURE_STRING_TXT\":\"\"}');
INSERT INTO `SERVERPROFILES` VALUES ('remoteWinServer_secureStr','POWERSHELL_WINDOWS','WinServerName','','userid','','',NULL,NULL,'win connect via secure string','{\"SECURE_KEY_ARRAY\":\"\",\"SECURE_STRING_TXT\":\"secure-string-goes-here\"}');
INSERT INTO `SERVERPROFILES` VALUES ('remoteWinServer_secureStr_key','POWERSHELL_WINDOWS','WinServerName','','userid','','',NULL,NULL,'win connect via secure string using user defined key <br>(a sample key shown)','{\"SECURE_KEY_ARRAY\":\"101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116\",\"SECURE_STRING_TXT\":\"secure-string-built-using-key-goes-here\"}');

INSERT INTO `COMMANDS` VALUES ('DataHunterPlaywrightDeployAndExecute','POWERSHELL_WINDOWS','Start-Process -FilePath \'${METRICS_BASE_DIR}\\..\\bin\\TestRunWIN-DataHunter-Playwright-DeployAndExecute.bat\'','N','refer DeployDataHunterTestArtifactsToJmeter.bat  and DataHunterExecuteJmeterPlaywrightTest.bat in mark59-scripting-samples ','[]');
INSERT INTO `COMMANDS` VALUES ('DataHunterSeleniumDeployAndExecute','POWERSHELL_WINDOWS','Start-Process -FilePath \'${METRICS_BASE_DIR}\\..\\bin\\TestRunWIN-DataHunter-Selenium-DeployAndExecute.bat\'','N','refer DeployDataHunterTestArtifactsToJmeter.bat and DataHunterExecuteJmeterSeleniumTest.bat in mark59-scripting-samples ','[]');
INSERT INTO `COMMANDS` VALUES ('DataHunterPlaywrightDeployAndExecute_LINUX','SSH_LINUX_UNIX','echo This script runs the Playwright deploy in the background, then opens a terminal for JMeter execution.\r\necho starting from $PWD;\r\n\r\n{   # try  \r\n\r\n    cd ../mark59-scripting-samples && \r\n    DH_TEST_SAMPLES_DIR=$(pwd) && \r\n    echo mark59-scripting-samples base dir is $DH_TEST_SAMPLES_DIR &&\r\n\r\n    cp ./mark59.properties ~/apache-jmeter/bin/mark59.properties &&\r\n    cp ../mark59-metrics-api/target/mark59-metrics-api.jar  ~/apache-jmeter/lib/ext/mark59-metrics-api.jar && \r\n    cp ./target/mark59-scripting-samples.jar  ~/apache-jmeter/lib/ext/mark59-scripting-samples.jar && \r\n    mkdir -p ~/Mark59_Runs/Jmeter_Results/DataHunter &&\r\n    rm -rf ~/apache-jmeter/lib/ext/mark59-scripting-samples-dependencies &&\r\n    cp -r ./target/mark59-scripting-samples-dependencies ~/apache-jmeter/lib/ext/mark59-scripting-samples-dependencies &&\r\n \r\n    gnome-terminal -- sh -c \"~/apache-jmeter/bin/jmeter -n -X -f  -t $DH_TEST_SAMPLES_DIR/test-plans/DataHunterPlaywrightTestPlan.jmx -l ~/Mark59_Runs/Jmeter_Results/DataHunter/DataHunterTestResults.csv -JForceTxnFailPercent=0 -JStartCdpListeners=false; exec bash\"\r\n\r\n} || { # catch \r\n    echo Deploy was unsuccessful! \r\n}','Y','refer bin/TestRunLINUX-DataHunter-Playwright-DeployAndExecute.sh','[]');
INSERT INTO `COMMANDS` VALUES ('DataHunterSeleniumDeployAndExecute_LINUX','SSH_LINUX_UNIX','echo This script runs the JMeter deploy in the background, then opens a terminal for JMeter execution.\r\necho starting from $PWD;\r\n\r\n{   # try  \r\n\r\n    cd ../mark59-scripting-samples && \r\n    DH_TEST_SAMPLES_DIR=$(pwd) && \r\n    echo mark59-scripting-samples base dir is $DH_TEST_SAMPLES_DIR &&\r\n\r\n    cp ./mark59.properties ~/apache-jmeter/bin/mark59.properties &&\r\n    cp ./chromedriver ~/apache-jmeter/bin/chromedriver && \r\n    cp ../mark59-metrics-api/target/mark59-metrics-api.jar  ~/apache-jmeter/lib/ext/mark59-metrics-api.jar && \r\n    cp ./target/mark59-scripting-samples.jar  ~/apache-jmeter/lib/ext/mark59-scripting-samples.jar && \r\n    mkdir -p ~/Mark59_Runs/Jmeter_Results/DataHunter &&\r\n    rm -rf ~/apache-jmeter/lib/ext/mark59-scripting-samples-dependencies &&\r\n    cp -r ./target/mark59-scripting-samples-dependencies ~/apache-jmeter/lib/ext/mark59-scripting-samples-dependencies &&\r\n \r\n    gnome-terminal -- sh -c \"~/apache-jmeter/bin/jmeter -n -X -f  -t $DH_TEST_SAMPLES_DIR/test-plans/DataHunterSeleniumTestPlan.jmx -l ~/Mark59_Runs/Jmeter_Results/DataHunter/DataHunterTestResults.csv -JForceTxnFailPercent=0 -JStartCdpListeners=false; exec bash\"\r\n\r\n} || { # catch \r\n    echo Deploy was unsuccessful! \r\n}','Y','refer bin/TestRunLINUX-DataHunter-Selenium-DeployAndExecute.sh','[]');
INSERT INTO `COMMANDS` VALUES ('DataHunterTestGenJmeterReport','POWERSHELL_WINDOWS','cd -Path ${METRICS_BASE_DIR}\\..\\mark59-results-splitter;\r\nStart-Process -FilePath \'.\\CreateDataHunterJmeterReports.bat\'\r\n','N','','[]');
INSERT INTO `COMMANDS` VALUES ('DataHunterTestGenJmeterReport_LINUX','SSH_LINUX_UNIX','echo This script creates a set of JMeter reports from a DataHunter test run.\r\necho starting from $PWD;\r\n\r\n{   # try  \r\n\r\n    cd ../mark59-results-splitter\r\n    gnome-terminal -- sh -c \"./CreateDataHunterJmeterReports.sh; exec bash\"\r\n\r\n} || { # catch \r\n    echo attempt to generate JMeter Reports has failed! \r\n}\r\n','Y','refer bin/TestRunLINUX-DataHunter-Test-GenJmeterReport.sh',NULL);
INSERT INTO `COMMANDS` VALUES ('DataHunterTestTrendsLoad','POWERSHELL_WINDOWS','cd -Path ${METRICS_BASE_DIR}\\..\\bin;\r\nStart-Process -FilePath \'.\\TestRunWIN-DataHunter-Test-TrendsLoad.bat\' -ArgumentList \'${DATABASE}\'\r\n','N','','[\"DATABASE\"]');
INSERT INTO `COMMANDS` VALUES ('DataHunterTestTrendsLoad_LINUX','SSH_LINUX_UNIX','echo This script runs mark59-trends-load,to load results from a DataHunter test run into the Metrics Trends Graph.\r\necho starting from $PWD;\r\n\r\n{   # try  \r\n\r\n    cd ../mark59-trends-load/target &&\r\n    gnome-terminal -- sh -c \"java -jar mark59-trends-load.jar -a DataHunter -i ~/Mark59_Runs/Jmeter_Results/DataHunter -d mysql; exec bash\"\r\n\r\n} || { # catch \r\n    echo attempt to execute mark59-trends-load has failed! \r\n}\r\n','Y','refer bin/TestRunLINUX-DataHunter-Test-GenJmeterReport.sh',NULL);
INSERT INTO `COMMANDS` VALUES ('FreePhysicalMemory','WMIC_WINDOWS','OS get FreePhysicalMemory','N','','[]');
INSERT INTO `COMMANDS` VALUES ('FreeVirtualMemory','WMIC_WINDOWS','OS get FreeVirtualMemory','N','','[]');
INSERT INTO `COMMANDS` VALUES ('LINUX_free_m_1_1','SSH_LINUX_UNIX','free -m 1 1','N','linux memory',NULL);
INSERT INTO `COMMANDS` VALUES ('LINUX_free_m_1_1_ViaSSH','SSH_LINUX_UNIX','free -m 1 1','N','linux memory','[\"SSH_IDENTITY\",\"SSH_PASSPHRASE\"]');
INSERT INTO `COMMANDS` VALUES ('LINUX_mpstat_1_1','SSH_LINUX_UNIX','mpstat 1 1','N','',NULL);
INSERT INTO `COMMANDS` VALUES ('NewRelicSampleCmd','GROOVY_SCRIPT','import java.net.InetSocketAddress;\r\nimport java.net.Proxy;\r\nimport java.time.ZoneOffset;\r\nimport java.time.ZonedDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\nimport com.mark59.metrics.pojos.ParsedMetric;\r\nimport com.mark59.metrics.pojos.ScriptResponse;\r\nimport okhttp3.Headers;\r\nimport okhttp3.OkHttpClient;\r\nimport okhttp3.Request;\r\nimport okhttp3.Response;\r\n\r\nString newRelicApiUrl = \"https://api.newrelic.com/v2/applications/\";\r\nString url = newRelicApiUrl + newRelicApiAppId + \"/hosts.json\";\r\nScriptResponse scriptResponse = new ScriptResponse();\r\nList<ParsedMetric> parsedMetrics = new ArrayList<ParsedMetric>();\r\n\r\nRequest request; Response response = null; JSONObject jsonResponse = null;\r\nProxy proxy = StringUtils.isNotBlank(proxyServer + proxyPort) ? new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyServer , new Integer(proxyPort))) : null;\r\nOkHttpClient client = proxy != null ? new OkHttpClient.Builder().proxy(proxy).build() : new OkHttpClient();\r\nHeaders headers = new Headers.Builder().add(\"X-Api-Key\", newRelicXapiKey).add(\"Content-Type\", \"application/json\").build();\r\nString debugJsonResponses =  \"running profile \" + serverProfile.serverProfileName + \", init req : \" + url ;\r\n\r\ntry {\r\n	request = new Request.Builder().url(url).headers(headers).get().build();\r\n	response = client.newCall(request).execute();\r\n	jsonResponse = new JSONObject(response.body().string());\r\n	debugJsonResponses =  debugJsonResponses + \"<br>init res.: \" + jsonResponse.toString();\r\n\r\n	ZonedDateTime utcTimeNow = ZonedDateTime.now(ZoneOffset.UTC);\r\n	String toHour 	= String.format(\"%02d\", utcTimeNow.getHour());\r\n	String toMinute	= String.format(\"%02d\", utcTimeNow.getMinute());\r\n	ZonedDateTime utcMinus1Min = utcTimeNow.minusMinutes(1);\r\n	String fromHour	= String.format(\"%02d\", utcMinus1Min.getHour());\r\n	String fromMinute = String.format(\"%02d\", utcMinus1Min.getMinute());\r\n	String fromDate = utcMinus1Min.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n	String toDate 	= utcTimeNow.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n	String urlDateRangeParmStr = \"&from=\" + fromDate + \"T\" + fromHour + \"%3A\" + fromMinute + \"%3A00%2B00%3A00\" + \"&to=\" + toDate + \"T\" + toHour + \"%3A\" + toMinute + \"%3A00%2B00%3A00\";\r\n\r\n	JSONArray application_hosts = jsonResponse.getJSONArray(\"application_hosts\");\r\n\r\n	for (int i = 0; i < application_hosts.length(); i++) {\r\n		JSONObject application_host = (JSONObject) application_hosts.get(i);\r\n		Integer hostId = (Integer) application_host.get(\"id\");\r\n		String hostName = ((String)application_host.get(\"host\")).replace(\":\",\"_\");\r\n		url = newRelicApiUrl + newRelicApiAppId  + \"/hosts/\" + hostId + \"/metrics/data.json?names%5B%5D=Memory/Heap/Used&names%5B%5D=CPU/User Time&names%5B%5D=Memory/Physical\" + urlDateRangeParmStr;\r\n		debugJsonResponses =  debugJsonResponses + \"<br><br>req.\" + i + \": \" + url ;\r\n\r\n		request = new Request.Builder().url(url).headers(headers).get().build();\r\n		response = client.newCall(request).execute();\r\n		jsonResponse = new JSONObject(response.body().string());\r\n		debugJsonResponses =  debugJsonResponses + \"<br>res.\" + i + \": \" + jsonResponse.toString();\r\n\r\n		Number memoryMetric = -1.0;\r\n		memoryMetric =  (Number)((JSONObject)((JSONObject)jsonResponse.getJSONObject(\"metric_data\").getJSONArray(\"metrics\").get(0)).getJSONArray(\"timeslices\").get(0)).getJSONObject(\"values\").get(\"used_mb_by_host\") ;\r\n		parsedMetrics.add(new ParsedMetric(\"MEMORY_HEAP_USED_MB_\" + hostName, memoryMetric, \"MEMORY\"));\r\n\r\n		Number cpuMetric = -1.0;\r\n		cpuMetric = (Number)((JSONObject)((JSONObject)jsonResponse.getJSONObject(\"metric_data\").getJSONArray(\"metrics\").get(1)).getJSONArray(\"timeslices\").get(0)).getJSONObject(\"values\").get(\"percent\");\r\n		parsedMetrics.add(new ParsedMetric(\"CPU_USER_TIME_%_\" + hostName, cpuMetric, \"CPU_UTIL\"));\r\n	}\r\n} catch (Exception e) {\r\n	debugJsonResponses =  debugJsonResponses + \"<br>\\n ERROR :  Exception last url: \" + url + \", response of  : \" + jsonResponse + \", message: \"+ e.getMessage();\r\n}\r\nscriptResponse.setCommandLog(debugJsonResponses);\r\nscriptResponse.setParsedMetrics(parsedMetrics);\r\nreturn scriptResponse;','N','NewRelic Supplied Sample','[\"newRelicApiAppId\",\"newRelicXapiKey\",\"parm1\",\"proxyServer\",\"proxyPort\"]');
INSERT INTO `COMMANDS` VALUES ('SimpleScriptSampleCmd','GROOVY_SCRIPT','import java.util.ArrayList;\r\nimport java.util.List;\r\nimport com.mark59.metrics.data.beans.ServerProfile;\r\nimport com.mark59.metrics.pojos.ParsedMetric;\r\nimport com.mark59.metrics.pojos.ScriptResponse;\r\n\r\nScriptResponse scriptResponse = new ScriptResponse(); \r\nList<ParsedMetric> parsedMetrics = new ArrayList<ParsedMetric>();\r\n\r\nString commandLogDebug = \"running script \" + serverProfile.getServerProfileName() + \"<br>\" +  serverProfile.getComment();\r\ncommandLogDebug += \"<br>passed parms : parm1=\" + parm1 + \", parm2=\" + parm2 + \", parm3=\" + parm3\r\n\r\nNumber aNumber = 123;\r\nparsedMetrics.add(new ParsedMetric(\"a_memory_txn\", aNumber, \"MEMORY\"));\r\nparsedMetrics.add(new ParsedMetric(\"a_cpu_util_txn\", 33.3,  \"CPU_UTIL\"));\r\nparsedMetrics.add(new ParsedMetric(\"some_datapoint\", 66.6,  \"DATAPOINT\"));\r\n\r\nscriptResponse.setCommandLog(commandLogDebug);\r\n/// scriptResponse.setParsedMetrics(parsedMetrics);\r\nscriptResponse.parsedMetrics=parsedMetrics;\r\nreturn scriptResponse;','N','supplied basic groovy script sample','[\"parm1\",\"parm2\",\"parm3\",\"parm4\"]');
INSERT INTO `COMMANDS` VALUES ('UNIX_Memory_Script','SSH_LINUX_UNIX','vmstat=$(vmstat -v); \r\nlet total_pages=$(print \"$vmstat\" | grep \'memory pages\' | awk \'{print $1}\'); \r\nlet pinned_pages=$(print \"$vmstat\" | grep \'pinned pages\' | awk \'{print $1}\'); \r\nlet pinned_percent=$(( $(print \"scale=4; $pinned_pages / $total_pages \" | bc) * 100 )); \r\nlet numperm_pages=$(print \"$vmstat\" | grep \'file pages\' | awk \'{print $1}\'); \r\nlet numperm_percent=$(print \"$vmstat\" | grep \'numperm percentage\' | awk \'{print $1}\'); \r\npgsp_utils=$(lsps -a | tail +2 | awk \'{print $5}\'); \r\nlet pgsp_num=$(print \"$pgsp_utils\" | wc -l | tr -d \' \'); \r\nlet pgsp_util_sum=0; \r\nfor pgsp_util in $pgsp_utils; do let pgsp_util_sum=$(( $pgsp_util_sum + $pgsp_util )); done; \r\npgsp_aggregate_util=$(( $pgsp_util_sum / $pgsp_num )); \r\nprint \"${pinned_percent},${numperm_percent},${pgsp_aggregate_util}\"','N','','[]');
INSERT INTO `COMMANDS` VALUES ('UNIX_VM_Memory','SSH_LINUX_UNIX','vmstat=$(vmstat -v); \r\nlet total_pages=$(print \"$vmstat\" | grep \'memory pages\' | awk \'{print $1}\'); \r\nlet pinned_pages=$(print \"$vmstat\" | grep \'pinned pages\' | awk \'{print $1}\'); \r\nlet pinned_percent=$(( $(print \"scale=4; $pinned_pages / $total_pages \" | bc) * 100 )); \r\nlet numperm_pages=$(print \"$vmstat\" | grep \'file pages\' | awk \'{print $1}\'); \r\nlet numperm_percent=$(print \"$vmstat\" | grep \'numperm percentage\' | awk \'{print $1}\'); \r\npgsp_utils=$(lsps -a | tail +2 | awk \'{print $5}\'); \r\nlet pgsp_num=$(print \"$pgsp_utils\" | wc -l | tr -d \' \'); \r\nlet pgsp_util_sum=0; \r\nfor pgsp_util in $pgsp_utils; do let pgsp_util_sum=$(( $pgsp_util_sum + $pgsp_util )); done; \r\npgsp_aggregate_util=$(( $pgsp_util_sum / $pgsp_num )); \r\nprint \"${pinned_percent},${numperm_percent},${pgsp_aggregate_util}\"','N','',NULL);
INSERT INTO `COMMANDS` VALUES ('UNIX_lparstat_5_1','SSH_LINUX_UNIX','lparstat 5 1','N','','[]');
INSERT INTO `COMMANDS` VALUES ('WinCpuCmd','WMIC_WINDOWS','cpu get loadpercentage','N','','[]');
INSERT INTO `COMMANDS` VALUES ('WIN_Core','POWERSHELL_WINDOWS','if (\'${PROFILE_SERVER}\' -eq \'localhost\'){\r\n\r\n    Write-Output \\\"get localhost metric \\\";\r\n    $ComputerCPU = Get-WmiObject -Class win32_processor -ErrorAction Stop;\r\n    $ComputerMemory = Get-WmiObject -Class win32_operatingsystem -ErrorAction Stop;\r\n\r\n} elseif ((![string]::IsNullOrEmpty(\'${SECURE_STRING_TXT}\')) -and ([string]::IsNullOrEmpty(\'${SECURE_KEY_ARRAY}\'))){\r\n\r\n    Write-Output \\\"  cpu using secure string \\\"; \r\n    <# To get the SECURE_STRING_TXT parameter value to store (no key):\r\n        $secureString = ConvertTo-SecureString \'plain-text-password\' -AsPlainText -Force\r\n        $secureStringTxt = Convertfrom-SecureString $secureString \r\n    #>\r\n\r\n    $securePwd = \'${SECURE_STRING_TXT}\' | ConvertTo-SecureString; \r\n    $credential = New-Object System.Management.Automation.PSCredential (\'${PROFILE_USERNAME}\', $securePwd);\r\n \r\n} elseif ((![string]::IsNullOrEmpty(\'${SECURE_STRING_TXT}\')) -and (![string]::IsNullOrEmpty(\'${SECURE_KEY_ARRAY}\'))){\r\n\r\n    Write-Output \\\"get remote server metric using using secure string with key \\\";\r\n    <# To get the SECURE_STRING_TXT parameter value to store (using key), \r\n        $secureString = ConvertTo-SecureString \'plain-text-password\' -AsPlainText -Force\r\n        [Byte[]] $key = ( your-comma-delimited-list-of-key-values-between-0-255 )\r\n        $secureStringTxt = Convertfrom-SecureString $secureString -key $key\r\n    #>\r\n \r\n    [Byte[]] $key = @(${SECURE_KEY_ARRAY}); \r\n    $securePwd = \'${SECURE_STRING_TXT}\' | ConvertTo-SecureString -Key $key;\r\n    $credential = New-Object System.Management.Automation.PSCredential (\'${PROFILE_USERNAME}\', $securePwd);\r\n  \r\n} else {\r\n\r\n    Write-Output \\\"get remote server metric using profile username and password \\\";\r\n    $password = ConvertTo-SecureString \'${PROFILE_PASSWORD}\' -AsPlainText -Force; \r\n    $credential = New-Object System.Management.Automation.PSCredential (\'${PROFILE_USERNAME}\', $password);\r\n}\r\n\r\nif (\'${PROFILE_SERVER}\' -ne \'localhost\'){ \r\n    $ComputerCPU = Get-WmiObject -Credential $credential -ComputerName ${PROFILE_SERVER} -Class win32_processor -ErrorAction Stop;\r\n    $ComputerMemory = Get-WmiObject -Credential $credential -ComputerName ${PROFILE_SERVER} -Class win32_operatingsystem -ErrorAction Stop;\r\n}\r\n\r\n$CPUUtil =  [math]::round(($ComputerCPU | Measure-Object -Property LoadPercentage -Average | Select-Object Average).Average);\r\n$FreePhysicalMemory= [math]::truncate($ComputerMemory.FreePhysicalMemory / 1MB);\r\n$FreeVirtualMemory = [math]::truncate($ComputerMemory.FreeVirtualMemory / 1MB);\r\n     \r\nWrite-Host \" CPU[\"$CPUUtil\"] FreePhysicalMemory[\"$FreePhysicalMemory\"] FreeVirtualMemory[\"$FreeVirtualMemory\"]\";\r\n','N','you should <# comment #> the debug Write-Output statements out to run in a real test :)','[\"SECURE_KEY_ARRAY\",\"SECURE_STRING_TXT\"]');
INSERT INTO `COMMANDS` VALUES ('WIN_DiskSpace_C','POWERSHELL_WINDOWS','if (\'${PROFILE_SERVER}\' -eq \'localhost\'){\r\n\r\n    $Drive =  Get-WMIObject Win32_LogicalDisk -Filter \\\"DeviceID=\'C:\'\\\" ;\r\n\r\n} elseif ((![string]::IsNullOrEmpty(\'${SECURE_STRING_TXT}\')) -and ([string]::IsNullOrEmpty(\'${SECURE_KEY_ARRAY}\'))){\r\n\r\n    $securePwd = \'${SECURE_STRING_TXT}\' | ConvertTo-SecureString; \r\n    $credential = New-Object System.Management.Automation.PSCredential (\'${PROFILE_USERNAME}\', $securePwd);\r\n \r\n} elseif ((![string]::IsNullOrEmpty(\'${SECURE_STRING_TXT}\')) -and (![string]::IsNullOrEmpty(\'${SECURE_KEY_ARRAY}\'))){\r\n\r\n    [Byte[]] $key = @(${SECURE_KEY_ARRAY}); \r\n    $securePwd = \'${SECURE_STRING_TXT}\' | ConvertTo-SecureString -Key $key;\r\n    $credential = New-Object System.Management.Automation.PSCredential (\'${PROFILE_USERNAME}\', $securePwd);\r\n  \r\n} else {\r\n\r\n    $password = ConvertTo-SecureString \'${PROFILE_PASSWORD}\' -AsPlainText -Force; \r\n    $credential = New-Object System.Management.Automation.PSCredential (\'${PROFILE_USERNAME}\', $password);\r\n}\r\n\r\nif (\'${PROFILE_SERVER}\' -ne \'localhost\'){ \r\n    $Drive = Get-WMIObject -Credential $credential -ComputerName ${PROFILE_SERVER} Win32_LogicalDisk -Filter \\\"DeviceID=\'C:\'\\\" ;\r\n}\r\n\r\n$FreeDiskSpace = $Drive | ForEach-Object {[math]::truncate($_.freespace / 1GB)};\r\nWrite-Host \"FreeDiskSpace[\"$FreeDiskSpace\"]\" ;','N','','[\"SECURE_KEY_ARRAY\",\"SECURE_STRING_TXT\"]');
INSERT INTO `COMMANDS` VALUES ('WIN_PerfRawData','POWERSHELL_WINDOWS','if (\'${PROFILE_SERVER}\' -eq \'localhost\'){\r\n\r\n    <# Write-Output \\\"get localhost metric \\\"; #>\r\n    $PerfRawData = Get-WmiObject Win32_PerfRawData_PerfOS_System;\r\n\r\n} elseif ((![string]::IsNullOrEmpty(\'${SECURE_STRING_TXT}\')) -and ([string]::IsNullOrEmpty(\'${SECURE_KEY_ARRAY}\'))){\r\n\r\n    <# Write-Output \\\"  cpu using secure string \\\"; #>\r\n    $securePwd = \'${SECURE_STRING_TXT}\' | ConvertTo-SecureString; \r\n    $credential = New-Object System.Management.Automation.PSCredential (\'${PROFILE_USERNAME}\', $securePwd);\r\n \r\n} elseif ((![string]::IsNullOrEmpty(\'${SECURE_STRING_TXT}\')) -and (![string]::IsNullOrEmpty(\'${SECURE_KEY_ARRAY}\'))){\r\n\r\n    <# Write-Output \\\"get remote server metric using using secure string with key \\\"; #>\r\n    [Byte[]] $key = @(${SECURE_KEY_ARRAY}); \r\n    $securePwd = \'${SECURE_STRING_TXT}\' | ConvertTo-SecureString -Key $key;\r\n    $credential = New-Object System.Management.Automation.PSCredential (\'${PROFILE_USERNAME}\', $securePwd);\r\n  \r\n} else {\r\n\r\n    <# Write-Output \\\"get remote server metric using profile username and password \\\"; #>\r\n    $password = ConvertTo-SecureString \'${PROFILE_PASSWORD}\' -AsPlainText -Force; \r\n    $credential = New-Object System.Management.Automation.PSCredential (\'${PROFILE_USERNAME}\', $password);\r\n}\r\n\r\nif (\'${PROFILE_SERVER}\' -ne \'localhost\'){ \r\n    $PerfRawData = Get-WmiObject -Credential $credential -ComputerName ${PROFILE_SERVER} Win32_PerfRawData_PerfOS_System\r\n}\r\n\r\n$CPUQlen = [math]::round(($PerfRawData | Measure-Object -Property ProcessorQueueLength -Average | Select-Object Average).Average);\r\n$Processes = [math]::round(($PerfRawData | Measure-Object -Property Processes -Average | Select-Object Average).Average);\r\nWrite-Host \" CPUQlen[\"$CPUQlen\"] Processes[\"$Processes\"] \" ;','N','','[\"SECURE_KEY_ARRAY\",\"SECURE_STRING_TXT\"]');

INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('LINUX_Memory_freeG','MEMORY','freeG','import org.apache.commons.lang3.StringUtils;\r\n// ---\r\nString targetColumnName= \"free\";              \r\nString targetRowName= \"Mem:\";  \r\n// ---\r\nString extractedMetric = \"-3\";\r\n\r\nif (StringUtils.isNotBlank(commandResponse)) {\r\n    String wordsOnThisResultLine = commandResponse.replace(\"\\n\", \" \").replace(\"\\r\", \" \");\r\n    ArrayList<String> cmdResultLine = new ArrayList<>(\r\n         Arrays.asList(wordsOnThisResultLine.trim().split(\"\\\\s+\")));\r\n\r\n    if (cmdResultLine.contains(targetColumnName)) {\r\n	extractedMetric = cmdResultLine\r\n		.get(cmdResultLine.indexOf(targetRowName) + cmdResultLine.indexOf(targetColumnName) + 1);\r\n    }\r\n}\r\nreturn Math.round(Double.parseDouble(extractedMetric) / 1000 );\r\n','','              total        used        free      shared  buff/cache   available\r\nMem:          28798       14043         561        1412       14392       12953\r\nSwap:             0           0           0\r\n');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('LINUX_Memory_totalG','MEMORY','totalG','import org.apache.commons.lang3.StringUtils;\r\n// ---\r\nString targetColumnName= \"total\";              \r\nString targetRowName= \"Mem:\";  \r\n// ---\r\nString extractedMetric = \"-3\";\r\n\r\nif (StringUtils.isNotBlank(commandResponse)) {\r\n    String wordsOnThisResultLine = commandResponse.replace(\"\\n\", \" \").replace(\"\\r\", \" \");\r\n    ArrayList<String> cmdResultLine = new ArrayList<>(\r\n         Arrays.asList(wordsOnThisResultLine.trim().split(\"\\\\s+\")));\r\n\r\n    if (cmdResultLine.contains(targetColumnName)) {\r\n	extractedMetric = cmdResultLine\r\n		.get(cmdResultLine.indexOf(targetRowName) + cmdResultLine.indexOf(targetColumnName) + 1);\r\n    }\r\n}\r\nreturn Math.round(Double.parseDouble(extractedMetric) / 1000 );\r\n','','              total        used        free      shared  buff/cache   available\r\nMem:          28798       14043         361        1412       14392       12953\r\nSwap:             0           0           0\r\n');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('LINUX_Memory_usedG','MEMORY','usedG','import org.apache.commons.lang3.StringUtils;\r\n// ---\r\nString targetColumnName= \"used\";              \r\nString targetRowName= \"Mem:\";  \r\n// ---\r\nString extractedMetric = \"-3\";\r\n\r\nif (StringUtils.isNotBlank(commandResponse)) {\r\n    String wordsOnThisResultLine = commandResponse.replace(\"\\n\", \" \").replace(\"\\r\", \" \");\r\n    ArrayList<String> cmdResultLine = new ArrayList<>(\r\n         Arrays.asList(wordsOnThisResultLine.trim().split(\"\\\\s+\")));\r\n\r\n    if (cmdResultLine.contains(targetColumnName)) {\r\n	extractedMetric = cmdResultLine\r\n		.get(cmdResultLine.indexOf(targetRowName) + cmdResultLine.indexOf(targetColumnName) + 1);\r\n    }\r\n}\r\nreturn Math.round(Double.parseDouble(extractedMetric) / 1000 );\r\n','','              total        used        free      shared  buff/cache   available\r\nMem:          28798       14043         361        1412       14392       12953\r\nSwap:             0           0           0\r\n');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Memory_FreePhysicalG','MEMORY','FreePhysicalG','Math.round(Double.parseDouble(commandResponse.replaceAll(\"[^\\\\d.]\", \"\")) / 1000000 )','','FreePhysicalG\r\n22510400');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Memory_FreeVirtualG','MEMORY','FreeVirtualG','Math.round(Double.parseDouble(commandResponse.replaceAll(\"[^\\\\d.]\", \"\")) / 1000000 )','','FreeVirtualMemory\r\n22510400');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Nix_CPU_Idle','CPU_UTIL','IDLE','import org.apache.commons.lang3.ArrayUtils;\r\n// ---\r\nString targetColumnName = \"%idle\"              \r\nString targetmetricFormat = \"\\\\d*\\\\.?\\\\d+\"   // a decimal format  \r\n// ---\r\nString extractedMetric = \"-1\";\r\nint colNumberOfTargetColumnName = -1;\r\nString[] commandResultLine = commandResponse.trim().split(\"\\\\r\\\\n|\\\\n|\\\\r\");\r\n\r\nfor (int i = 0; i < commandResultLine.length && \"-1\".equals(extractedMetric); i++) {\r\n\r\n    String[] wordsOnThiscommandResultsLine = commandResultLine[i].trim().split(\"\\\\s+\");\r\n\r\n    if (colNumberOfTargetColumnName > -1\r\n  	&& wordsOnThiscommandResultsLine[colNumberOfTargetColumnName].matches(targetmetricFormat)) {\r\n	extractedMetric = wordsOnThiscommandResultsLine[colNumberOfTargetColumnName];\r\n    }\r\n    if (colNumberOfTargetColumnName == -1) { // column name not yet found, so see if it is on this line ...\r\n	colNumberOfTargetColumnName = ArrayUtils.indexOf(wordsOnThiscommandResultsLine, targetColumnName);\r\n    }\r\n}\r\nreturn extractedMetric;\r\n','This works on data in a simple column format (eg unix lparstat and linux mpstat cpu). It will return the first matching value it finds in the column requested.','System configuration: type=Shared mode=Uncapped smt=4 lcpu=4 mem=47104MB psize=60 ent=0.50 \r\n\r\n%user  %sys  %wait  %idle physc %entc  lbusy   app  vcsw phint  %nsp  %utcyc\r\n----- ----- ------ ------ ----- ----- ------   --- ----- ----- -----  ------\r\n 11.3  15.0    0.0   73.7  0.22  44.5    6.1 45.26   919     0   101   1.39 ');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Nix_CPU_UTIL','CPU_UTIL','','import org.apache.commons.lang3.ArrayUtils;\r\nimport java.math.RoundingMode;\r\n// \r\nString targetColumnName = \"%idle\";\r\nString targetmetricFormat = \"\\\\d*\\\\.?\\\\d+\"; // a decimal format\r\n// \r\nString notFound = \"-1\";\r\nString extractedMetric = notFound;\r\nint colNumberOfTargetColumnName = -1;\r\nString[] commandResultLine = commandResponse.trim().split(\"\\\\r\\\\n|\\\\n|\\\\r\");\r\n\r\nfor (int i = 0; i < commandResultLine.length && notFound.equals(extractedMetric); i++) {\r\n\r\n	String[] wordsOnThiscommandResultsLine = commandResultLine[i].trim().split(\"\\\\s+\");\r\n\r\n	if (colNumberOfTargetColumnName > -1\r\n			&& wordsOnThiscommandResultsLine[colNumberOfTargetColumnName].matches(targetmetricFormat)) {\r\n		extractedMetric = wordsOnThiscommandResultsLine[colNumberOfTargetColumnName];\r\n	}\r\n	if (colNumberOfTargetColumnName == -1) { // column name not yet found, so see if it is on this line ...\r\n		colNumberOfTargetColumnName = ArrayUtils.indexOf(wordsOnThiscommandResultsLine, targetColumnName);\r\n	}\r\n}\r\n\r\nif (notFound.equals(extractedMetric))return notFound;\r\nString cpuUtil = notFound;\r\ntry {  cpuUtil = new BigDecimal(100).subtract(new BigDecimal(extractedMetric)).setScale(1, RoundingMode.HALF_UP).toPlainString();} catch (Exception e) {}\r\nreturn cpuUtil;','This works on data in a simple column format (eg unix lparstat and linux mpstat cpu). It will return the first matching value it finds in the column requested.','System configuration: type=Shared mode=Uncapped smt=4 lcpu=4 mem=47104MB psize=60 ent=0.50 \r\n\r\n%user  %sys  %wait  %idle physc %entc  lbusy   app  vcsw phint  %nsp  %utcyc\r\n----- ----- ------ ------ ----- ----- ------   --- ----- ----- -----  ------\r\n 11.3  15.0    0.0   73.7  0.22  44.5    6.1 45.26   919     0   101   1.39 ');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Return1','DATAPOINT','','return 1','','any rand junk');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('UNIX_Memory_numperm_percent','MEMORY','numperm_percent','commandResponse.split(\",\")[1].trim()','','1,35,4');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('UNIX_Memory_pgsp_aggregate_util','MEMORY','pgsp_aggregate_util','commandResponse.split(\",\")[2].trim()','','1,35,4');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('UNIX_Memory_pinned_percent','MEMORY','pinned_percent','commandResponse.split(\",\")[0].trim()','','1,35,4');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('WicnCpu','CPU_UTIL','','java.util.regex.Matcher m = java.util.regex.Pattern.compile(\"(\\\\d+(?:\\\\.\\\\d+)?)\").matcher(commandResponse);\r\nDouble sum = 0; \r\nint count = 0; \r\nwhile (m.find()){ \r\n    sum += Double.parseDouble(m.group()); \r\n    count++;\r\n}; \r\nif (count==0) \r\n    return 0 ; \r\nelse \r\n    return Math.round(sum/count);','avg a list of (dec) nums in text ','LoadPercentage.with a dot\r\n1.99\r\n3\r\n2.99\r\n3\r\n');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('FreePhysicalDiskSpaceGB_C','DATAPOINT','FreePhysicalDiskSpaceGB_C','import org.apache.commons.lang3.StringUtils;\r\nimport org.apache.commons.lang3.math.NumberUtils;\r\nString extractedMetric = \"-1\";\r\nif (NumberUtils.isParsable(StringUtils.substringBetween(commandResponse, \"FreeDiskSpace[\", \"]\"))){\r\n    extractedMetric = StringUtils.substringBetween(commandResponse, \"FreeDiskSpace[\", \"]\");  \r\n}\r\nreturn extractedMetric; ','..FreeDiskSpace[627].. ','any debug output (without the square brackets bit)\r\nFreeDiskSpace[627]');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Memory_FreePhysicalG_PS','MEMORY','FreePhysicalG','import org.apache.commons.lang3.StringUtils;\r\nimport org.apache.commons.lang3.math.NumberUtils;\r\nString extractedMetric = \"-1\";\r\nif (NumberUtils.isParsable(StringUtils.substringBetween(commandResponse, \"FreePhysicalMemory[\", \"]\"))){\r\n    extractedMetric = StringUtils.substringBetween(commandResponse, \"FreePhysicalMemory[\", \"]\");  \r\n}\r\nreturn extractedMetric; ','..FreePhysicalMemory[14].. ','get remote server metric using using secure string with key\r\nCPU[46] FreePhysicalMemory[14] FreeVirtualMemory[18] FreeDiskSpace[32]');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Memory_FreeVirtualG_PS','MEMORY','FreeVirtualG','import org.apache.commons.lang3.StringUtils;\r\nimport org.apache.commons.lang3.math.NumberUtils;\r\nString extractedMetric = \"-1\";\r\nif (NumberUtils.isParsable(StringUtils.substringBetween(commandResponse, \"FreeVirtualMemory[\", \"]\"))){\r\n    extractedMetric = StringUtils.substringBetween(commandResponse, \"FreeVirtualMemory[\", \"]\");  \r\n}\r\nreturn extractedMetric; ','..FreeVirtualMemory[18]..','get remote server metric using using secure string with key\r\nCPU[46] FreePhysicalMemory[14] FreeVirtualMemory[18] FreeDiskSpace[32]');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Cpu_Qlen_PS','DATAPOINT','Cpu_Qlen','import org.apache.commons.lang3.StringUtils;\r\nimport org.apache.commons.lang3.math.NumberUtils;\r\nString extractedMetric = \"-1\";\r\nif (NumberUtils.isParsable(StringUtils.substringBetween(commandResponse, \"CPUQlen[\", \"]\"))){\r\n    extractedMetric = StringUtils.substringBetween(commandResponse, \"CPUQlen[\", \"]\");  \r\n}\r\nreturn extractedMetric; ','..CPUQlen[1234].. ','some text\r\n CPUQlen[1234] Processes[367]');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Cpu_Util_PS','CPU_UTIL','','import org.apache.commons.lang3.StringUtils;\r\nimport org.apache.commons.lang3.math.NumberUtils;\r\nString extractedMetric = \"-1\";\r\nif (NumberUtils.isParsable(StringUtils.substringBetween(commandResponse, \"CPU[\", \"]\"))){\r\n    extractedMetric = StringUtils.substringBetween(commandResponse, \"CPU[\", \"]\");  \r\n}\r\nreturn extractedMetric; ','..CPU[14].. ','get remote server metric using using secure string with key\r\nCPU[46] FreePhysicalMemory[14] FreeVirtualMemory[18] FreeDiskSpace[32]');
INSERT INTO `COMMANDRESPONSEPARSERS` VALUES ('Processes_PS','DATAPOINT','Processes','import org.apache.commons.lang3.StringUtils;\r\nimport org.apache.commons.lang3.math.NumberUtils;\r\nString extractedMetric = \"-1\";\r\nif (NumberUtils.isParsable(StringUtils.substringBetween(commandResponse, \"Processes[\", \"]\"))){\r\n    extractedMetric = StringUtils.substringBetween(commandResponse, \"Processes[\", \"]\");  \r\n}\r\nreturn extractedMetric; ','..Processes[367].. ','some text\r\n CPUQlen[1234] Processes[367]');

INSERT INTO `SERVERCOMMANDLINKS` VALUES ('DemoLINUX-DataHunterPlaywrightDeployAndExecute','DataHunterPlaywrightDeployAndExecute_LINUX');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('DemoLINUX-DataHunterSeleniumDeployAndExecute','DataHunterSeleniumDeployAndExecute_LINUX');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('DemoLINUX-DataHunterTestGenJmeterReport','DataHunterTestGenJmeterReport_LINUX');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('DemoLINUX-DataHunterTestTrendsLoad','DataHunterTestTrendsLoad_LINUX');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('DemoWIN-DataHunterPlaywrightDeployAndExecute','DataHunterPlaywrightDeployAndExecute');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('DemoWIN-DataHunterSeleniumDeployAndExecute','DataHunterSeleniumDeployAndExecute');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('DemoWIN-DataHunterTestGenJmeterReport','DataHunterTestGenJmeterReport');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('DemoWIN-DataHunterTestTrendsLoad','DataHunterTestTrendsLoad');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_LINUX','LINUX_free_m_1_1');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_LINUX','LINUX_mpstat_1_1');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WMIC_WINDOWS','FreePhysicalMemory');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WMIC_WINDOWS','FreeVirtualMemory');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WMIC_WINDOWS','WinCpuCmd');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WMIC_WINDOWS_HOSTID','FreePhysicalMemory');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WMIC_WINDOWS_HOSTID','FreeVirtualMemory');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WMIC_WINDOWS_HOSTID','WinCpuCmd');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteLinuxServer','LINUX_free_m_1_1');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteLinuxServer','LINUX_mpstat_1_1');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteLinuxServerViaSSH','LINUX_free_m_1_1_ViaSSH');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteUnixVM','UNIX_Memory_Script');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteUnixVM','UNIX_lparstat_5_1');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_WMIC','FreePhysicalMemory');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_WMIC','FreeVirtualMemory');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_WMIC','WinCpuCmd');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('NewRelicSampleProfile','NewRelicSampleCmd');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('SimpleScriptSampleRunner','SimpleScriptSampleCmd');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_pwd','WIN_Core');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_pwd','WIN_DiskSpace_C');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_pwd','WIN_PerfRawData');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_secureStr','WIN_Core');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_secureStr','WIN_DiskSpace_C');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_secureStr','WIN_PerfRawData');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_secureStr_key','WIN_Core');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_secureStr_key','WIN_DiskSpace_C');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('remoteWinServer_secureStr_key','WIN_PerfRawData');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WINDOWS','WIN_Core');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WINDOWS_HOSTID','WIN_Core');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WINDOWS_HOSTID','WIN_DiskSpace_C');
INSERT INTO `SERVERCOMMANDLINKS` VALUES ('localhost_WINDOWS_HOSTID','WIN_PerfRawData');

INSERT INTO `COMMANDPARSERLINKS` VALUES ('DataHunterPlaywrightDeployAndExecute','Return1');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('DataHunterPlaywrightDeployAndExecute_LINUX','Return1');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('DataHunterSeleniumDeployAndExecute','Return1');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('DataHunterSeleniumDeployAndExecute_LINUX','Return1');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('DataHunterTestGenJmeterReport','Return1');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('DataHunterTestGenJmeterReport_LINUX','Return1');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('DataHunterTestTrendsLoad','Return1');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('DataHunterTestTrendsLoad_LINUX','Return1');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('FreePhysicalMemory','Memory_FreePhysicalG');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('FreeVirtualMemory','Memory_FreeVirtualG');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('LINUX_free_m_1_1','LINUX_Memory_freeG');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('LINUX_free_m_1_1','LINUX_Memory_totalG');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('LINUX_free_m_1_1','LINUX_Memory_usedG');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('LINUX_free_m_1_1_ViaSSH','LINUX_Memory_freeG');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('LINUX_free_m_1_1_ViaSSH','LINUX_Memory_totalG');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('LINUX_free_m_1_1_ViaSSH','LINUX_Memory_usedG');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('LINUX_mpstat_1_1','Nix_CPU_UTIL');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('UNIX_lparstat_5_1','Nix_CPU_UTIL');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('UNIX_Memory_Script','UNIX_Memory_numperm_percent');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('UNIX_Memory_Script','UNIX_Memory_pgsp_aggregate_util');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('UNIX_Memory_Script','UNIX_Memory_pinned_percent');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('UNIX_VM_Memory','UNIX_Memory_numperm_percent');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('UNIX_VM_Memory','UNIX_Memory_pgsp_aggregate_util');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('UNIX_VM_Memory','UNIX_Memory_pinned_percent');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('WinCpuCmd','WicnCpu');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('WIN_Core','Cpu_Util_PS');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('WIN_Core','Memory_FreePhysicalG_PS');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('WIN_Core','Memory_FreeVirtualG_PS');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('WIN_DiskSpace_C','FreePhysicalDiskSpaceGB_C');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('WIN_PerfRawData','Cpu_Qlen_PS');
INSERT INTO `COMMANDPARSERLINKS` VALUES ('WIN_PerfRawData','Processes_PS');
