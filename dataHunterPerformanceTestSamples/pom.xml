<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>com.mark59</groupId>
	<artifactId>dataHunterPerformanceTestSamples</artifactId>
	<version>4.2</version>
	<packaging>jar</packaging>
	
	<name>dataHunterPerformanceTestSamples</name>

	<properties>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
	
		<!-- Start log4j security fix -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.17.2</version>
 			<scope>provided</scope>			
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.17.2</version>
 			<scope>provided</scope>			
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.17.2</version>
 			<scope>provided</scope>			
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-1.2-api</artifactId>
			<version>2.17.2</version>
 			<scope>provided</scope>			
		</dependency>
		<!-- End log4j security fix -->	
	

		<!-- This entry is not required for this project as it is already included as a dependency of mark59-selenium-sample-dsl (above). 
		     Including it example for use in projects not referring the sample DSL project, so they will require it -->
		<dependency>
			<groupId>com.mark59</groupId>
			<artifactId>mark59-selenium-implementation</artifactId>
			<version>4.2</version>
		</dependency>

		<dependency>
			<groupId>com.mark59</groupId>
			<artifactId>mark59-selenium-sample-dsl</artifactId>
			<version>4.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.jmeter</groupId>
			<artifactId>ApacheJMeter_java</artifactId>
			<version>5.4.3</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.4</version>
		</dependency>
	
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.2</version>
		</dependency>

	</dependencies>


	<build>
		<plugins>

			<!-- override default maven-compiler-plugin version -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.10.1</version>
			</plugin>

		<!-- Maven Jar Plugin and Dependency Plugins
		     phase/goals: clean package  
		     The two plugins work in conjunction to produce an output Jar and a directory of its dependencies. 
		     Both need to be copied to lib/ext of the target JMeter instance. -->
		
		<!-- Previous versions of this POM had used the Maven Assembly Plugin to create a single jar as the project outut, but unfortunately it's not a 
			 general solution, and calls to CDP (DevTools) now fail if you use this approach.
		     
		     This particular project (dataHunterPerformanceTestSamples) has a dependency on the mark59-selenium-sample-dsl project, which is not in Central.
		     So to build this project you can run the mark59 'aggregation' pom, or first install mark59-selenium-sample-dsl (goals: clean package install) -->
		
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.2</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>./${project.artifactId}-dependencies</classpathPrefix>
						</manifest>
					</archive>
				</configuration>
			</plugin>
		
			<!-- When running from the Eclipse IDE if you receive this error attempting a Maven build:
				 "Artifact has not been packaged yet. When used on reactor artifact, copy should be executed after packaging: see MDEP-187.",
				 check that in your Maven Run Configuration for the project you have "Resolve Workspace Artifacts" unticked -->		
					
			<!-- The <?m2e ignore?> tag just prevents an Error being displayed when using Eclipse, due to a long standing m2e bug.
				 https://stackoverflow.com/questions/30642630/artifact-has-not-been-packaged-yet/68633437#68633437 -->

			<!-- The <excludeScope>provided</excludeScope> tag is required so that dependencies scoped as 'provided' are honored.
				 That is, those artifacts (and their transitive dependencies) are not included in the output directory. -->
			     			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<?m2e ignore?>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<excludeScope>provided</excludeScope>
							<outputDirectory>${project.build.directory}/${project.artifactId}-dependencies</outputDirectory>
						</configuration>
					</execution>
				</executions>				
			</plugin>
			
		</plugins>
		<finalName>${project.artifactId}</finalName>
	</build>
	
</project>