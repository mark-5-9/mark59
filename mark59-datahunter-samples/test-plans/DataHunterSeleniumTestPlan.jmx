<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DataHunter Selenium Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="dataHunterUrl" elementType="Argument">
            <stringProp name="Argument.name">dataHunterUrl</stringProp>
            <stringProp name="Argument.value">${__P(DataHunterUrl,http://localhost:8081/mark59-datahunter)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dataHunterApplicationId" elementType="Argument">
            <stringProp name="Argument.name">dataHunterApplicationId</stringProp>
            <stringProp name="Argument.value">${__P(DataHunterApplicationId,DATAHUNTER_PV_TEST)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pacing" elementType="Argument">
            <stringProp name="Argument.name">pacing</stringProp>
            <stringProp name="Argument.value">25 5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mark59MetricsUrl" elementType="Argument">
            <stringProp name="Argument.name">mark59MetricsUrl</stringProp>
            <stringProp name="Argument.value">${__P(Mark59MetricsUrl,http://localhost:8085/mark59-metrics)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">see ServerMetrics_localhost thread group</stringProp>
          </elementProp>
          <elementProp name="runningInDocker" elementType="Argument">
            <stringProp name="Argument.name">runningInDocker</stringProp>
            <stringProp name="Argument.value">${__P(RunningInDocker,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="additionalOptions" elementType="Argument">
            <stringProp name="Argument.name">additionalOptions</stringProp>
            <stringProp name="Argument.value">${__P(AdditionalOptions, )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="headlessModeIteratorTG" elementType="Argument">
            <stringProp name="Argument.name">headlessModeIteratorTG</stringProp>
            <stringProp name="Argument.value">${__P(HeadlessModeIteratorTG,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">see DataHunterLifecycleIteratorPvtScript</stringProp>
          </elementProp>
          <elementProp name="startCdpListeners" elementType="Argument">
            <stringProp name="Argument.name">startCdpListeners</stringProp>
            <stringProp name="Argument.value">${__P(StartCdpListeners,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">see DataHunterLifecyclePvtScript</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="mark59propsAlternativeOrOverrideValues" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">Properties systemProperties = System.getProperties();
systemProperties.setProperty(&quot;mark59.selenium.driver.path.chrome&quot;, &quot;./chromedriver.exe&quot;);
systemProperties.setProperty(&quot;mark59.log.directory&quot;, &quot;C:/temp/jmeter_test_logs_testplan_override/&quot;);
systemProperties.setProperty(&quot;mark59.server.profiles.excel.file.path&quot;, &quot;./mark59serverprofiles.xlsx&quot;);
 
OUT.println (&quot;DataHunter Selenium Test Plan:  Mark59 properties directly set here : &quot;);
OUT.println (&quot;mark59.selenium.driver.path.chrome     : &quot; + systemProperties.getProperty(&quot;mark59.selenium.driver.path.chrome&quot;));
OUT.println (&quot;mark59.log.directory                   : &quot; + systemProperties.getProperty(&quot;mark59.screenshot.directory&quot;));
OUT.println (&quot;mark59.server.profiles.excel.file.path : &quot; + systemProperties.getProperty(&quot;mark59.server.profiles.excel.file.path&quot;));

SampleResult.setIgnore();

OUT.println (&quot;------------------------------------------------------------&quot;);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">Windows example of using system properties to override mark59.properties setting  (by default this script should be disabled)</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="setOperatingSystemProperty" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String OS_NAME_LC = System.getProperty(&quot;os.name&quot;).toLowerCase(java.util.Locale.ENGLISH);;

log.info   (&quot;**** Operating system is  : &quot; + OS_NAME_LC );


os = &quot;LINUX&quot;;
if ( OS_NAME_LC.indexOf(&quot;win&quot;) &gt;= 0 ) {
	os = &quot;WINDOWS&quot;; 
} else if ( OS_NAME_LC.indexOf(&quot;mac&quot;) &gt;= 0 ) {
	os = &quot;MAC&quot;; 
}   

// System Properties vs JMeterUtils - please review the mark59 User Guide if using JSR223 for Mark59 scripts
System.getProperties().setProperty(&quot;LOCALHOST_OS&quot;, &quot;localhost_&quot; + os);

SampleResult.setIgnore();
 
OUT.println(&quot;OS property has been set to : &quot; + os );
log.info   (&quot;OS property has been set to : &quot; + os );</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DataHunterLifecycle" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(Users,2)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RampUp,25)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(Duration,70)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellTimer guiclass="TestBeanGUI" testclass="BeanShellTimer" testname="Iteration Pacing Timer" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters">${pacing}</stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">// &quot;Iteration Pacing Timer&quot; - a recommended timing option for mark59 
// Please put your target iteration time (delay + script run time) in seconds in the &quot;Parameters&quot; field above, optionally followed by variance in secs eg:  20 5  
long currentTimeMillis = System.currentTimeMillis(); 

long interation_pacing_ms  = Long.valueOf(bsh.args[0]) * 1000; 

long interation_variance_ms = 0;
if (bsh.args.length &gt; 1){
    interation_variance_ms = Long.valueOf(bsh.args[1]) * 1000;
}

long interation_pacing_this_iter_ms = interation_pacing_ms - interation_variance_ms +  (int)( Math.random() * (interation_variance_ms*2 + 1));
long delay = 0;  

//System.out.println(&quot; &quot;);
//System.out.println(&quot;&gt;&gt;  pacer parm - interation_pacing_ms         : &quot; + interation_pacing_ms );
//System.out.println(&quot;          parm - interation_variance_ms       : &quot; + interation_variance_ms );
//System.out.println(&quot;          calc - interation_pacing_this_iter  : &quot; + interation_pacing_this_iter_ms );

String last_delay_ms_str = vars.get(&quot;last_delay_ms&quot;);
long last_delay_ms = 0;
if (last_delay_ms_str != null){
    last_delay_ms = Long.valueOf(last_delay_ms_str);
}
//System.out.println(&quot;               - last_delay_ms                : &quot; + last_delay_ms) ;
	
String interation_start_time_ms_str = vars.get(&quot;interation_start_time_ms&quot;);

if ( interation_start_time_ms_str != null ){
//	System.out.println(&quot;               - (Prev) interation_start_time : &quot; + interation_start_time_ms_str + &quot;  -  &quot; + (new Date(Long.valueOf(interation_start_time_ms_str)).toString()) );     
                                                                                                                               
	delay = interation_pacing_this_iter_ms + Long.valueOf(interation_start_time_ms_str) + last_delay_ms - System.currentTimeMillis();
	if (delay &lt; 0){
         log.info(&quot;  script execution time exceeded pacing by  : &quot; + (0-delay) + &quot; ms.&quot;  );
         delay = 0;
	}
} else {
//	System.out.println(&quot;               - (Prev) interation_start_time : &quot; + interation_start_time_ms_str );    
} 

vars.put(&quot;interation_start_time_ms&quot;, &quot;&quot; + currentTimeMillis );
vars.put(&quot;last_delay_ms&quot;, &quot;&quot; + delay );

//System.out.println(&quot;          calc - (This) interation_start_time : &quot; + vars.get(&quot;interation_start_time_ms&quot;) + &quot;  -  &quot; + (new Date(Long.valueOf(vars.get(&quot;interation_start_time_ms&quot;))).toString()));
//System.out.println(&quot;    pausing for calculated delay of &quot; + delay + &quot; ms&quot;  );

Thread.sleep(delay);
return 0;</stringProp>
        </BeanShellTimer>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="3599307">user</stringProp>
            <stringProp name="-713045828">headlessMode</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1788170512">
              <stringProp name="-1997382182">Mathew</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-2004359268">
              <stringProp name="2390765">Mark</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="481484236">
              <stringProp name="2379971">Luke</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-1756641887">
              <stringProp name="2314539">John</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="DataHunterLifecycle" enabled="true">
          <stringProp name="TestPlan.comments">default DATAHUNTER_URL set to  http://localhost:8081/mark59-datahunter</stringProp>
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="DATAHUNTER_URL" elementType="Argument">
                <stringProp name="Argument.name">DATAHUNTER_URL</stringProp>
                <stringProp name="Argument.value">${dataHunterUrl}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DATAHUNTER_APPLICATION_ID" elementType="Argument">
                <stringProp name="Argument.name">DATAHUNTER_APPLICATION_ID</stringProp>
                <stringProp name="Argument.value">${dataHunterApplicationId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FORCE_TXN_FAIL_PERCENT" elementType="Argument">
                <stringProp name="Argument.name">FORCE_TXN_FAIL_PERCENT</stringProp>
                <stringProp name="Argument.value">${__P(ForceTxnFailPercent,25)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="START_CDP_LISTENERS" elementType="Argument">
                <stringProp name="Argument.name">START_CDP_LISTENERS</stringProp>
                <stringProp name="Argument.value">${startCdpListeners}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="USER" elementType="Argument">
                <stringProp name="Argument.name">USER</stringProp>
                <stringProp name="Argument.value">${user}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="______________________ driver settings: ________________________" elementType="Argument">
                <stringProp name="Argument.name">______________________ driver settings: ________________________</stringProp>
                <stringProp name="Argument.value">Refer Mark59 User Guide for details</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DRIVER" elementType="Argument">
                <stringProp name="Argument.name">DRIVER</stringProp>
                <stringProp name="Argument.value">CHROME</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HEADLESS_MODE" elementType="Argument">
                <stringProp name="Argument.name">HEADLESS_MODE</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PAGE_LOAD_STRATEGY" elementType="Argument">
                <stringProp name="Argument.name">PAGE_LOAD_STRATEGY</stringProp>
                <stringProp name="Argument.value">normal</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BROWSER_DIMENSIONS" elementType="Argument">
                <stringProp name="Argument.name">BROWSER_DIMENSIONS</stringProp>
                <stringProp name="Argument.value">1920,1080</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PROXY" elementType="Argument">
                <stringProp name="Argument.name">PROXY</stringProp>
                <stringProp name="Argument.value"> </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ADDITIONAL_OPTIONS" elementType="Argument">
                <stringProp name="Argument.name">ADDITIONAL_OPTIONS</stringProp>
                <stringProp name="Argument.value">${additionalOptions}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WRITE_FFOX_BROWSER_LOGFILE" elementType="Argument">
                <stringProp name="Argument.name">WRITE_FFOX_BROWSER_LOGFILE</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="UNHANDLED_PROMPT_BEHAVIOUR" elementType="Argument">
                <stringProp name="Argument.name">UNHANDLED_PROMPT_BEHAVIOUR</stringProp>
                <stringProp name="Argument.value">ignore</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="______________________ logging settings: _______________________" elementType="Argument">
                <stringProp name="Argument.name">______________________ logging settings: _______________________</stringProp>
                <stringProp name="Argument.value">Expected values: &apos;default&apos;, &apos;buffer&apos;, or &apos;write&apos;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Screenshots_At_Start_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Screenshots_At_Start_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Screenshots_At_End_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Screenshots_At_End_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Page_Source_At_Start_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Page_Source_At_Start_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Page_Source_At_End_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Page_Source_At_End_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Perf_Log_At_End_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Perf_Log_At_End_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Buffered_Logs" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Buffered_Logs</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Screenshot" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Screenshot</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Page_Source" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Page_Source</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Perf_Log" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Perf_Log</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Stack_Trace" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Stack_Trace</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="LOG_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">LOG_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PRINT_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">PRINT_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="______________________ miscellaneous: __________________________" elementType="Argument">
                <stringProp name="Argument.name">______________________ miscellaneous: __________________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Restrict_To_Only_Run_On_IPs_List" elementType="Argument">
                <stringProp name="Argument.name">Restrict_To_Only_Run_On_IPs_List</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="EMULATE_NETWORK_CONDITIONS" elementType="Argument">
                <stringProp name="Argument.name">EMULATE_NETWORK_CONDITIONS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="___________________" elementType="Argument">
                <stringProp name="Argument.name">___________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="script build information: " elementType="Argument">
                <stringProp name="Argument.name">script build information: </stringProp>
                <stringProp name="Argument.value">using mark59-selenium-implementation Version: 5.2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.mark59.datahunter.samples.scripts.DataHunterLifecyclePvtScript</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DataHunterLifecycleIterator" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(Users,2)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RampUp,20)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(Duration,70)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="3599307">user</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="2078998545">
              <stringProp name="1556202915">JohnLennon</stringProp>
            </collectionProp>
            <collectionProp name="1172557325">
              <stringProp name="1684097533">PaulMcartney</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="DataHunterLifecycleIterator" enabled="true">
          <stringProp name="TestPlan.comments">default DATAHUNTER_URL set to  http://localhost:8081/mark59-datahunter</stringProp>
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="DATAHUNTER_URL" elementType="Argument">
                <stringProp name="Argument.name">DATAHUNTER_URL</stringProp>
                <stringProp name="Argument.value">${dataHunterUrl}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DATAHUNTER_APPLICATION_ID" elementType="Argument">
                <stringProp name="Argument.name">DATAHUNTER_APPLICATION_ID</stringProp>
                <stringProp name="Argument.value">${dataHunterApplicationId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FORCE_TXN_FAIL_PERCENT" elementType="Argument">
                <stringProp name="Argument.name">FORCE_TXN_FAIL_PERCENT</stringProp>
                <stringProp name="Argument.value">${__P(ForceTxnFailPercent,0)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="USER" elementType="Argument">
                <stringProp name="Argument.name">USER</stringProp>
                <stringProp name="Argument.value">${user}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="______________________ interation settings: _____________________" elementType="Argument">
                <stringProp name="Argument.name">______________________ interation settings: _____________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ITERATE_FOR_PERIOD_IN_SECS" elementType="Argument">
                <stringProp name="Argument.name">ITERATE_FOR_PERIOD_IN_SECS</stringProp>
                <stringProp name="Argument.value">25  </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ITERATE_FOR_NUMBER_OF_TIMES" elementType="Argument">
                <stringProp name="Argument.name">ITERATE_FOR_NUMBER_OF_TIMES</stringProp>
                <stringProp name="Argument.value"> </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ITERATION_PACING_IN_SECS" elementType="Argument">
                <stringProp name="Argument.name">ITERATION_PACING_IN_SECS</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="STOP_THREAD_AFTER_TEST_START_IN_SECS" elementType="Argument">
                <stringProp name="Argument.name">STOP_THREAD_AFTER_TEST_START_IN_SECS</stringProp>
                <stringProp name="Argument.value"> </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="STOP_THREAD_ON_FAILURE" elementType="Argument">
                <stringProp name="Argument.name">STOP_THREAD_ON_FAILURE</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="______________________ driver settings: ________________________" elementType="Argument">
                <stringProp name="Argument.name">______________________ driver settings: ________________________</stringProp>
                <stringProp name="Argument.value">Refer Mark59 User Guide for details</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DRIVER" elementType="Argument">
                <stringProp name="Argument.name">DRIVER</stringProp>
                <stringProp name="Argument.value">CHROME</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HEADLESS_MODE" elementType="Argument">
                <stringProp name="Argument.name">HEADLESS_MODE</stringProp>
                <stringProp name="Argument.value">${headlessModeIteratorTG}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PAGE_LOAD_STRATEGY" elementType="Argument">
                <stringProp name="Argument.name">PAGE_LOAD_STRATEGY</stringProp>
                <stringProp name="Argument.value">normal</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="BROWSER_DIMENSIONS" elementType="Argument">
                <stringProp name="Argument.name">BROWSER_DIMENSIONS</stringProp>
                <stringProp name="Argument.value">900,900</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PROXY" elementType="Argument">
                <stringProp name="Argument.name">PROXY</stringProp>
                <stringProp name="Argument.value"> </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ADDITIONAL_OPTIONS" elementType="Argument">
                <stringProp name="Argument.name">ADDITIONAL_OPTIONS</stringProp>
                <stringProp name="Argument.value">${additionalOptions}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WRITE_FFOX_BROWSER_LOGFILE" elementType="Argument">
                <stringProp name="Argument.name">WRITE_FFOX_BROWSER_LOGFILE</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="UNHANDLED_PROMPT_BEHAVIOUR" elementType="Argument">
                <stringProp name="Argument.name">UNHANDLED_PROMPT_BEHAVIOUR</stringProp>
                <stringProp name="Argument.value">ignore</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="______________________ logging settings: _______________________" elementType="Argument">
                <stringProp name="Argument.name">______________________ logging settings: _______________________</stringProp>
                <stringProp name="Argument.value">Expected values: &apos;default&apos;, &apos;buffer&apos;, or &apos;write&apos;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Screenshots_At_Start_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Screenshots_At_Start_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Screenshots_At_End_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Screenshots_At_End_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Page_Source_At_Start_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Page_Source_At_Start_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Page_Source_At_End_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Page_Source_At_End_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Log_Perf_Log_At_End_Of_Transactions" elementType="Argument">
                <stringProp name="Argument.name">Log_Perf_Log_At_End_Of_Transactions</stringProp>
                <stringProp name="Argument.value">default</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Buffered_Logs" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Buffered_Logs</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Screenshot" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Screenshot</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Page_Source" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Page_Source</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Perf_Log" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Perf_Log</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="On_Exception_Write_Stack_Trace" elementType="Argument">
                <stringProp name="Argument.name">On_Exception_Write_Stack_Trace</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="LOG_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">LOG_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PRINT_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">PRINT_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="______________________ miscellaneous: __________________________" elementType="Argument">
                <stringProp name="Argument.name">______________________ miscellaneous: __________________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Restrict_To_Only_Run_On_IPs_List" elementType="Argument">
                <stringProp name="Argument.name">Restrict_To_Only_Run_On_IPs_List</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="EMULATE_NETWORK_CONDITIONS" elementType="Argument">
                <stringProp name="Argument.name">EMULATE_NETWORK_CONDITIONS</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="___________________" elementType="Argument">
                <stringProp name="Argument.name">___________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="script build information: " elementType="Argument">
                <stringProp name="Argument.name">script build information: </stringProp>
                <stringProp name="Argument.value">using mark59-selenium-implementation Version: 5.2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.mark59.datahunter.samples.scripts.DataHunterLifecycleIteratorPvtScript</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ServerMetrics_localhost" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(MonitoringUsers,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(Duration,80)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>3.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="localhost_via_web" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="MARK59_METRICS_URL" elementType="Argument">
                <stringProp name="Argument.name">MARK59_METRICS_URL</stringProp>
                <stringProp name="Argument.value">${mark59MetricsUrl}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SERVER_PROFILE_NAME" elementType="Argument">
                <stringProp name="Argument.name">SERVER_PROFILE_NAME</stringProp>
                <stringProp name="Argument.value">${__property(LOCALHOST_OS)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="." elementType="Argument">
                <stringProp name="Argument.name">.</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_________________________ logging settings: _______________" elementType="Argument">
                <stringProp name="Argument.name">_________________________ logging settings: _______________</stringProp>
                <stringProp name="Argument.value">Expected values: &apos;short&apos; (default), &apos;full&apos;, &apos;no&apos;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="LOG_ERROR_MESSAGES" elementType="Argument">
                <stringProp name="Argument.name">LOG_ERROR_MESSAGES</stringProp>
                <stringProp name="Argument.value">short</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PRINT_ERROR_MESSAGES" elementType="Argument">
                <stringProp name="Argument.name">PRINT_ERROR_MESSAGES</stringProp>
                <stringProp name="Argument.value">short</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="LOG_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">LOG_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PRINT_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">PRINT_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name=".." elementType="Argument">
                <stringProp name="Argument.name">..</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_________________________ miscellaneous: __________________" elementType="Argument">
                <stringProp name="Argument.name">_________________________ miscellaneous: __________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Restrict_To_Only_Run_On_IPs_List" elementType="Argument">
                <stringProp name="Argument.name">Restrict_To_Only_Run_On_IPs_List</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="..." elementType="Argument">
                <stringProp name="Argument.name">...</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_________________________ notes: __________________________" elementType="Argument">
                <stringProp name="Argument.name">_________________________ notes: __________________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="__" elementType="Argument">
                <stringProp name="Argument.name">__</stringProp>
                <stringProp name="Argument.value">- please replace the default url with your actual.</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_" elementType="Argument">
                <stringProp name="Argument.name">_</stringProp>
                <stringProp name="Argument.value">- server profile of &apos;localhost&apos; only reports metrics of the mark59-metrics machine!</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="-" elementType="Argument">
                <stringProp name="Argument.name">-</stringProp>
                <stringProp name="Argument.value">   use actual machine name or (better) &apos;..viaExcel&apos; &apos;localhost..&apos; entry instead (see Mark59 User Guide)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="___________________" elementType="Argument">
                <stringProp name="Argument.name">___________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="build information: " elementType="Argument">
                <stringProp name="Argument.name">build information: </stringProp>
                <stringProp name="Argument.value">mark59-metrics-api Version: 5.2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.mark59.metrics.api.ServerMetricsCaptureViaWeb</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ServerMetrics_distributed" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(DistributedUsers,0)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(Duration,80)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Using the HOSTID profile ( &quot;localhost_WINDOWS_HOSTID&quot; ) to pick up the load generator name for distrubted tests - set DistributedUsers to 1 to activate</stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>3.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="localhost_distributed_via_web" enabled="true">
          <stringProp name="TestPlan.comments">requires a excel spreadsheet with profiels for each of the laod generalors in the distributed test</stringProp>
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="SERVER_PROFILE_NAME" elementType="Argument">
                <stringProp name="Argument.name">SERVER_PROFILE_NAME</stringProp>
                <stringProp name="Argument.value">${__property(LOCALHOST_OS)}_HOSTID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="." elementType="Argument">
                <stringProp name="Argument.name">.</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_________________________ logging settings: _______________" elementType="Argument">
                <stringProp name="Argument.name">_________________________ logging settings: _______________</stringProp>
                <stringProp name="Argument.value">PRINT_ERROR_MESSAGES values: &apos;short&apos; (default), &apos;full&apos;, &apos;no&apos;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="LOG_ERROR_MESSAGES" elementType="Argument">
                <stringProp name="Argument.name">LOG_ERROR_MESSAGES</stringProp>
                <stringProp name="Argument.value">short</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PRINT_ERROR_MESSAGES" elementType="Argument">
                <stringProp name="Argument.name">PRINT_ERROR_MESSAGES</stringProp>
                <stringProp name="Argument.value">short</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="LOG_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">LOG_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PRINT_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">PRINT_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="-" elementType="Argument">
                <stringProp name="Argument.name">-</stringProp>
                <stringProp name="Argument.value">   use actual machine name or (better) &apos;..viaExcel&apos; &apos;localhost..&apos; entry instead (see Mark59 User Guide)</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="______________________ miscellaneous: ____________________" elementType="Argument">
                <stringProp name="Argument.name">______________________ miscellaneous: ____________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="OVERRIDE_PROPERTY_MARK59_SERVER_PROFILES_EXCEL_FILE_PATH" elementType="Argument">
                <stringProp name="Argument.name">OVERRIDE_PROPERTY_MARK59_SERVER_PROFILES_EXCEL_FILE_PATH</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Restrict_To_Only_Run_On_IPs_List" elementType="Argument">
                <stringProp name="Argument.name">Restrict_To_Only_Run_On_IPs_List</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="_" elementType="Argument">
                <stringProp name="Argument.name">_</stringProp>
                <stringProp name="Argument.value">- server profile of &apos;localhost&apos; only reports metrics of the mark59-metrics machine!</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="___________________" elementType="Argument">
                <stringProp name="Argument.name">___________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="build information: " elementType="Argument">
                <stringProp name="Argument.name">build information: </stringProp>
                <stringProp name="Argument.value">mark59-metrics-api (via excel) Version: 5.2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.mark59.metrics.api.ServerMetricsCaptureViaExcel</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DemoMark59ScriptAsJSR223" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">10</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DataHunterBasicSampleScriptJSR223Format" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">package com.mark59.datahunter.samples.scripts.jsr223format;

import java.util.LinkedHashMap;
import java.util.Map;

import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;
import org.apache.logging.log4j.Level;
import org.openqa.selenium.By;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.mark59.core.JmeterFunctionsImpl;
import com.mark59.core.utils.IpUtilities;
import com.mark59.core.utils.Log4jConfigurationHelper;
import com.mark59.selenium.corejmeterimpl.JmeterFunctionsForSeleniumScripts;
import com.mark59.selenium.corejmeterimpl.KeepBrowserOpen;
import com.mark59.selenium.corejmeterimpl.SeleniumAbstractJavaSamplerClient;
import com.mark59.selenium.driversimpl.SeleniumDriverFactory;


// &gt;&gt; --------- COMMENT OUT THE NEXT TWO LINES ---------  
//public class DataHunterBasicSampleScriptJSR223Format  {
//public static void main(String[] args) throws InterruptedException{
// &lt;&lt;  
	
	
class ThisScript extends SeleniumAbstractJavaSamplerClient {
	
	@SuppressWarnings(&quot;unused&quot;)
	final class TestConstants {
		public static final String DELETE_MULTIPLE_POLICIES_URL_PATH    = &quot;/delete_multiple_policies&quot;;
		public static final String COUNT_POLICIES_URL_PATH              = &quot;/count_policies&quot;;	
		public static final String ADD_POLICY_URL_PATH                  = &quot;/add_policy&quot;;
		public static final String PRINT_SELECTED_POLICIES_URL_PATH     = &quot;/print_selected_policies&quot;;
		public static final String COUNT_POLICIES_BREAKDOWN_URL_PATH    = &quot;/count_policies_breakdown&quot;;		
		public static final String NEXT_POLICY_URL_PATH                 = &quot;/next_policy&quot;;	
		public static final String UNUSED                               = &quot;UNUSED&quot;;  
		public static final String EQUALS                               = &quot;EQUALS&quot;;
		public static final String SELECT_MOST_RECENTLY_ADDED           = &quot;SELECT_MOST_RECENTLY_ADDED&quot;;  
	}
	
	
	@Override
	protected Map&lt;String, String&gt; additionalTestParameters() {
		Map&lt;String, String&gt; jmeterAdditionalParameters = new LinkedHashMap&lt;String, String&gt;();
		jmeterAdditionalParameters.put(&quot;DATAHUNTER_URL&quot;,			&quot;http://localhost:8081/mark59-datahunter&quot;);
		jmeterAdditionalParameters.put(&quot;DATAHUNTER_APPLICATION_ID&quot;, &quot;DATAHUNTER_PV_TEST_BASIC&quot;);
		jmeterAdditionalParameters.put(&quot;USER&quot;, 	 &quot;default_user&quot;);		
		jmeterAdditionalParameters.put(&quot;DRIVER&quot;, &quot;CHROME&quot;);
		jmeterAdditionalParameters.put(SeleniumDriverFactory.HEADLESS_MODE, String.valueOf(false));
		jmeterAdditionalParameters.put(SeleniumDriverFactory.PAGE_LOAD_STRATEGY, PageLoadStrategy.NORMAL.toString());
		jmeterAdditionalParameters.put(SeleniumDriverFactory.PROXY, &quot;&quot;);
		jmeterAdditionalParameters.put(SeleniumDriverFactory.ADDITIONAL_OPTIONS, &quot;&quot;);
		jmeterAdditionalParameters.put(SeleniumDriverFactory.WRITE_FFOX_BROWSER_LOGFILE, 	String.valueOf(false));
		jmeterAdditionalParameters.put(IpUtilities.RESTRICT_TO_ONLY_RUN_ON_IPS_LIST, &quot;&quot;);
		jmeterAdditionalParameters.put(SeleniumDriverFactory.EMULATE_NETWORK_CONDITIONS, &quot;&quot;);
		jmeterAdditionalParameters.put(JmeterFunctionsImpl.LOG_RESULTS_SUMMARY, String.valueOf(true));
		return jmeterAdditionalParameters;			
	}
	

	@Override
	protected void runSeleniumTest(JavaSamplerContext context, JmeterFunctionsForSeleniumScripts jm,  WebDriver driver) {
//		jm.logScreenshotsAtStartOfTransactions(Mark59LogLevels.WRITE);
//		jm.logScreenshotsAtEndOfTransactions(Mark59LogLevels.WRITE);
//		jm.logPageSourceAtStartOfTransactions(Mark59LogLevels.WRITE);		
//		jm.logPageSourceAtEndOfTransactions(Mark59LogLevels.WRITE );
//		jm.logPerformanceLogAtEndOfTransactions(Mark59LogLevels.WRITE);
		// you need to use jm.writeBufferedArtifacts to output BUFFERed data (see end of this method)  		
//		jm.logAllLogsAtEndOfTransactions(Mark59LogLevels.BUFFER);		

		String thread = Thread.currentThread().getName();
		String lifecycle = &quot;thread_&quot; + thread;
//		System.out.println(&quot;Thread &quot; + thread + &quot; is running with LOG level &quot; + LOG.getLevel());

		String dataHunterUrl 	= context.getParameter(&quot;DATAHUNTER_URL&quot;);
		String application 		= context.getParameter(&quot;DATAHUNTER_APPLICATION_ID&quot;);
		String user 			= context.getParameter(&quot;USER&quot;);

// 		delete any existing policies for this application/thread combination
		
		jm.startTransaction(&quot;DH_lifecycle_0001_loadInitialPage&quot;);
		driver.get(dataHunterUrl + TestConstants.DELETE_MULTIPLE_POLICIES_URL_PATH + &quot;?application=&quot; + application);
		jm.endTransaction(&quot;DH_lifecycle_0001_loadInitialPage&quot;);
		
		driver.findElement(By.id(&quot;lifecycle&quot;)).sendKeys(lifecycle);

        jm.startTransaction(&quot;DH_lifecycle_0100_deleteMultiplePolicies&quot;);
		driver.findElement(By.id(&quot;submit&quot;)).submit();
		checkSqlOk(driver.findElement(By.id(&quot;sqlResult&quot;)));
		jm.endTransaction(&quot;DH_lifecycle_0100_deleteMultiplePolicies&quot;);	
	
//		add a policy 		
		driver.get(dataHunterUrl + TestConstants.ADD_POLICY_URL_PATH + &quot;?application=&quot; + application);

		driver.findElement(By.id(&quot;identifier&quot;)).sendKeys(&quot;DH-BASIC-POLICY&quot;); 		
		driver.findElement(By.id(&quot;lifecycle&quot;)).sendKeys(lifecycle); 		
		
		Select dropdown = new Select(driver.findElement(By.id(&quot;useability&quot;)));
		dropdown.selectByVisibleText(TestConstants.UNUSED);

		driver.findElement(By.id(&quot;otherdata&quot;)).sendKeys(user); 
		driver.findElement(By.id(&quot;epochtime&quot;)).sendKeys(Long.toString(System.currentTimeMillis()));
//		jm.writeScreenshot(&quot;add_policy_DH-BASIC-POLICY&quot;);
		
		jm.startTransaction(&quot;DH_lifecycle_0200_addPolicy&quot;);
		driver.findElement(By.id(&quot;submit&quot;)).submit();
		checkSqlOk(driver.findElement(By.id(&quot;sqlResult&quot;)));
		jm.endTransaction(&quot;DH_lifecycle_0200_addPolicy&quot;);
		
//		set a Data Point		
		Long rowsAffected = Long.valueOf(driver.findElement(By.id(&quot;rowsAffected&quot;)).getText());
		LOG.debug( &quot;rowsAffected : &quot; + rowsAffected); 
		jm.userDataPoint(application + &quot;_PolicyRowsAffected&quot;, rowsAffected);    // (expected to be always 1 for this action)		

		driver.findElement(By.linkText(&quot;Back&quot;)).click();
		
//		jm.writeBufferedArtifacts();
	}

	private void checkSqlOk(WebElement sqlResultWebElement) {
		String sqlResultText = sqlResultWebElement.getText();
		if ( !&quot;PASS&quot;.equals(sqlResultText) ) {
			throw new RuntimeException(&quot;SQL issue (&quot; + sqlResultText + &quot;)&quot;);   
		}
	}
}


// &gt;&gt; --------- COMMENT OUT THE NEXT THREE LINES ---------      (capitalization of the SampleResult variable in the next line is deliberate)   
//org.apache.jmeter.samplers.SampleResult SampleResult = new org.apache.jmeter.samplers.SampleResult();
//SampleResult.sampleStart();
//Log4jConfigurationHelper.init(Level.INFO) ;
// &lt;&lt; 

org.apache.jmeter.samplers.SampleResult testResults = new ThisScript().runSeleniumTest(KeepBrowserOpen.NEVER, true); 
if (testResults != null) {
	for (org.apache.jmeter.samplers.SampleResult subResult : testResults.getSubResults()) {
		SampleResult.addSubResult(subResult, false);
	}
}
SampleResult.setDataType(&quot;PARENT&quot; );
SampleResult.setEndTime(0);

// &gt;&gt; --------- COMMENT OUT THE END BRACES BELOW --------- 
//}
//}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DataHunterLifecyclePvtScriptJSR223Format" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">package com.mark59.datahunter.samples.scripts.jsr223format;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ThreadLocalRandom;

import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;
import org.apache.logging.log4j.Level;
import org.openqa.selenium.By;
import org.openqa.selenium.Capabilities;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import com.mark59.core.JmeterFunctionsImpl;
import com.mark59.core.Outcome;
import com.mark59.core.utils.IpUtilities;
import com.mark59.core.utils.Log4jConfigurationHelper;
import com.mark59.core.utils.Mark59Constants;
import com.mark59.core.utils.SafeSleep;
import com.mark59.dsl.samples.seleniumDSL.core._GenericPage;
import com.mark59.dsl.samples.seleniumDSL.pageElements.DropdownList;
import com.mark59.dsl.samples.seleniumDSL.pageElements.HtmlTable;
import com.mark59.dsl.samples.seleniumDSL.pageElements.HtmlTableRow;
import com.mark59.dsl.samples.seleniumDSL.pageElements.InputTextElement;
import com.mark59.dsl.samples.seleniumDSL.pageElements.Link;
import com.mark59.dsl.samples.seleniumDSL.pageElements.PageTextElement;
import com.mark59.dsl.samples.seleniumDSL.pageElements.SubmitBtn;
import com.mark59.selenium.corejmeterimpl.JmeterFunctionsForSeleniumScripts;
import com.mark59.selenium.corejmeterimpl.KeepBrowserOpen;
import com.mark59.selenium.corejmeterimpl.SeleniumAbstractJavaSamplerClient;
import com.mark59.selenium.driversimpl.SeleniumDriverFactory;


// &gt;&gt; --------- COMMENT OUT THE NEXT TWO LINES ---------  
//public class DataHunterLifecyclePvtScriptJSR223Format  {
//public static void main(String[] args) throws InterruptedException{
// &lt;&lt;  
	
	
/**
 * Note that in this more advanced example access to the com.mark59.dsl.samples.seleniumDSL.* packages is assumed (from the mark59-dsl-samples project).
 * &lt;p&gt;Hint: A quick and dirty way to do this is to copy target jar from the mark59-datahunter-samples project since it contains the sample DSL
 * packages, into the lib/ext directory of your JMeter instance.  
 *   
 * @author Phil Webb
 */
class ThisScript extends SeleniumAbstractJavaSamplerClient {
	
	final class TestConstants {
		public static final String DELETE_MULTIPLE_POLICIES_URL_PATH    = &quot;/delete_multiple_policies&quot;;
		public static final String COUNT_POLICIES_URL_PATH              = &quot;/count_policies&quot;;	
		public static final String ADD_POLICY_URL_PATH                  = &quot;/add_policy&quot;;
		public static final String PRINT_SELECTED_POLICIES_URL_PATH     = &quot;/print_selected_policies&quot;;
		public static final String COUNT_POLICIES_BREAKDOWN_URL_PATH    = &quot;/count_policies_breakdown&quot;;		
		public static final String NEXT_POLICY_URL_PATH                 = &quot;/next_policy&quot;;	
		public static final String UNUSED                               = &quot;UNUSED&quot;;  
		public static final String EQUALS                               = &quot;EQUALS&quot;;
		public static final String SELECT_MOST_RECENTLY_ADDED           = &quot;SELECT_MOST_RECENTLY_ADDED&quot;;  
	}
	
	final class DataHunterInputPages extends _GenericPage {

		public DataHunterInputPages(WebDriver driver) {
			super(driver);
		}
		public DropdownList applicationStartsWithOrEquals() {
			return new DropdownList(driver, By.id(&quot;applicationStartsWithOrEquals&quot;));
		}

		public InputTextElement identifier() {
			return new InputTextElement(driver, By.id(&quot;identifier&quot;));
		}

		public InputTextElement lifecycle() {
			return new InputTextElement(driver, By.id(&quot;lifecycle&quot;));
		}

		public DropdownList useability() {
			return new DropdownList(driver, By.id(&quot;useability&quot;));
		}

		public InputTextElement otherdata() {
			return new InputTextElement(driver, By.id(&quot;otherdata&quot;));
		}

		public InputTextElement epochtime() {
			return new InputTextElement(driver, By.id(&quot;epochtime&quot;));
		}

		public DropdownList selectOrder() {
			return new DropdownList(driver, By.id(&quot;selectOrder&quot;));
		}

		public SubmitBtn submit() {
			return new SubmitBtn(driver, By.id(&quot;submit&quot;));
		}
	}
	
	
	final class DatatHunterActionPages extends  _GenericPage {
		
		public DatatHunterActionPages(WebDriver driver) {
			super(driver);
		}
		public InputTextElement identifier() {
			return new InputTextElement(driver, By.id(&quot;identifier&quot;));
		}

		public PageTextElement sql() {
			return new PageTextElement(driver, By.id(&quot;sql&quot;));
		}

		public PageTextElement sqlResult() {
			return new PageTextElement(driver, By.id(&quot;sqlResult&quot;));
		}

		public PageTextElement rowsAffected() {
			return new PageTextElement(driver, By.id(&quot;rowsAffected&quot;));
		}

		public PageTextElement sqlResultText() {
			return new PageTextElement(driver, By.id(&quot;sqlResultText&quot;));
		}

		public Link backLink() {
			return new Link(driver, &quot;Back&quot;);
		}

		public int getCountForBreakdown(String application, String lifecycle, String useability){  // breakdown result only 
			PageTextElement countForBreakdownElement = null;
			try { countForBreakdownElement =  new PageTextElement(driver, By.id((application + &quot;_&quot; + lifecycle + &quot;_&quot; + useability + &quot;_count&quot;).replace(&quot; &quot;, &quot;_&quot;)));
			} catch ( NoSuchElementException e) {return 0;	}
			int count = Integer.valueOf(countForBreakdownElement.getText());
			return count;
		}
		public HtmlTable printSelectedPoliciesTable() {
			return new HtmlTable(driver, &quot;printSelectedPoliciesTable&quot;);
		}

		public String formatResultsMessage(String tag){
			return  &quot;DataHunter &quot; +  sqlResultText().getText() + &quot; at &quot; + tag + &quot;, SQL statement [&quot; + sql().getText() + &quot;]&quot; +
					&quot;, rows affected [&quot; +  rowsAffected().getText() + &quot;], details [&quot; + sqlResultText().getText() + &quot;]&quot;;		
		}
	}

	
	@Override
	protected Map&lt;String, String&gt; additionalTestParameters() {
		Map&lt;String, String&gt; jmeterAdditionalParameters = new LinkedHashMap&lt;String, String&gt;();
		jmeterAdditionalParameters.put(&quot;DATAHUNTER_URL&quot;,			&quot;http://localhost:8081/mark59-datahunter&quot;);
		jmeterAdditionalParameters.put(&quot;DATAHUNTER_APPLICATION_ID&quot;, &quot;DATAHUNTER_PV_TEST&quot;);
		jmeterAdditionalParameters.put(&quot;FORCE_TXN_FAIL_PERCENT&quot;, 	&quot;20&quot;);
		jmeterAdditionalParameters.put(&quot;USER&quot;, 	 &quot;default_user&quot;);		

		jmeterAdditionalParameters.put(SeleniumDriverFactory.DRIVER, &quot;CHROME&quot;);
		jmeterAdditionalParameters.put(SeleniumDriverFactory.HEADLESS_MODE, String.valueOf(false));
		jmeterAdditionalParameters.put(SeleniumDriverFactory.BROWSER_DIMENSIONS, Mark59Constants.DEFAULT_BROWSER_DIMENSIONS);
		jmeterAdditionalParameters.put(SeleniumDriverFactory.PAGE_LOAD_STRATEGY, PageLoadStrategy.NONE.toString());
		jmeterAdditionalParameters.put(SeleniumDriverFactory.PROXY, &quot;&quot;);
		jmeterAdditionalParameters.put(SeleniumDriverFactory.ADDITIONAL_OPTIONS, &quot;&quot;);
		jmeterAdditionalParameters.put(SeleniumDriverFactory.WRITE_FFOX_BROWSER_LOGFILE, String.valueOf(false));
		jmeterAdditionalParameters.put(IpUtilities.RESTRICT_TO_ONLY_RUN_ON_IPS_LIST, &quot;&quot;);			
		jmeterAdditionalParameters.put(SeleniumDriverFactory.EMULATE_NETWORK_CONDITIONS, &quot;&quot;);
		jmeterAdditionalParameters.put(JmeterFunctionsImpl.LOG_RESULTS_SUMMARY, String.valueOf(true));
		return jmeterAdditionalParameters;			
	}
	

	@Override
	protected void runSeleniumTest(JavaSamplerContext context, JmeterFunctionsForSeleniumScripts jm,  WebDriver driver) {
		
		String thread = Thread.currentThread().getName();
		String lifecycle = &quot;thread_&quot; + thread;
		String dataHunterUrl 	= context.getParameter(&quot;DATAHUNTER_URL&quot;);
		String application 		= context.getParameter(&quot;DATAHUNTER_APPLICATION_ID&quot;);
		int forceTxnFailPercent = Integer.valueOf(context.getParameter(&quot;FORCE_TXN_FAIL_PERCENT&quot;).trim());
		String user 			= context.getParameter(&quot;USER&quot;);
		
		PrintSomeMsgOnceAtStartUp(dataHunterUrl, driver);

		DataHunterInputPages dataHunterInputPages = new DataHunterInputPages(driver); 

// 		delete any existing policies for this application/thread combination
		jm.startTransaction(&quot;DH_lifecycle_0001_loadInitialPage&quot;);
		driver.get(dataHunterUrl + TestConstants.DELETE_MULTIPLE_POLICIES_URL_PATH + &quot;?application=&quot; + application);
		dataHunterInputPages.lifecycle().waitUntilClickable();
		jm.endTransaction(&quot;DH_lifecycle_0001_loadInitialPage&quot;);	
		
		dataHunterInputPages.lifecycle().type(lifecycle);

		DatatHunterActionPages resultsPage = new DatatHunterActionPages(driver);
		
		jm.startTransaction(&quot;DH_lifecycle_0100_deleteMultiplePolicies&quot;);		
		dataHunterInputPages.submit().submit().waitUntilClickable( resultsPage.backLink() );  
		waitActionPageCheckSqlOk(new DatatHunterActionPages(driver));
		jm.endTransaction(&quot;DH_lifecycle_0100_deleteMultiplePolicies&quot;);	
	
//		add a set of policies 		
		driver.get(dataHunterUrl + TestConstants.ADD_POLICY_URL_PATH + &quot;?application=&quot; + application);
		
		for (int i = 1; i &lt;= 5; i++) {
			dataHunterInputPages.identifier().type(&quot;TESTID&quot; + i);
			dataHunterInputPages.lifecycle().type(lifecycle);
			dataHunterInputPages.useability().selectByVisibleText(TestConstants.UNUSED) ;
			dataHunterInputPages.otherdata().type(user);		
			dataHunterInputPages.epochtime().type(Long.toString(System.currentTimeMillis()));
//			jm.writeScreenshot(&quot;add_policy_TESTID&quot; + i);

			jm.startTransaction(&quot;DH_lifecycle_0200_addPolicy&quot;);
			SafeSleep.sleep(200);  // Mocking a 200 ms txn delay			
			dataHunterInputPages.submit().submit().waitUntilClickable( resultsPage.backLink() );   
			waitActionPageCheckSqlOk(resultsPage);
			jm.endTransaction(&quot;DH_lifecycle_0200_addPolicy&quot;);
			
			resultsPage.backLink().click().waitUntilClickable( dataHunterInputPages.submit() ).thenSleep();    
		} 
	
//		dummy transaction just to test transaction failure behavior
		jm.startTransaction(&quot;DH_lifecycle_0299_sometimes_I_fail&quot;);
		int randomNum_1_to_100 = ThreadLocalRandom.current().nextInt(1, 101);
		if ( randomNum_1_to_100 &gt;= forceTxnFailPercent ) {
			jm.endTransaction(&quot;DH_lifecycle_0299_sometimes_I_fail&quot;, Outcome.PASS);
		} else {
			jm.endTransaction(&quot;DH_lifecycle_0299_sometimes_I_fail&quot;, Outcome.FAIL);
		}
		
		driver.get(dataHunterUrl + TestConstants.COUNT_POLICIES_URL_PATH + &quot;?application=&quot; + application);
		dataHunterInputPages.useability().selectByVisibleText(TestConstants.UNUSED).thenSleep();   // ** note 2

		jm.startTransaction(&quot;DH_lifecycle_0300_countUnusedPolicies&quot;);
		dataHunterInputPages.submit().submit().waitUntilClickable( resultsPage.backLink() );
		waitActionPageCheckSqlOk(resultsPage);
		jm.endTransaction(&quot;DH_lifecycle_0300_countUnusedPolicies&quot;);
		
		Long countPolicies = Long.valueOf( resultsPage.rowsAffected().getText());
		LOG.debug( &quot;countPolicies : &quot; + countPolicies); 
		jm.userDataPoint(application + &quot;_Total_Unused_Policy_Count&quot;, countPolicies);
		
// 		count breakdown (count for unused DATAHUNTER_PV_TEST policies for this thread )
		driver.get(dataHunterUrl + TestConstants.COUNT_POLICIES_BREAKDOWN_URL_PATH + &quot;?application=&quot; + application);		
		dataHunterInputPages.applicationStartsWithOrEquals().selectByVisibleText(TestConstants.EQUALS);
		dataHunterInputPages.useability().selectByVisibleText(TestConstants.UNUSED);

		jm.startTransaction(&quot;DH_lifecycle_0400_countUnusedPoliciesCurrentThread&quot;);		
		dataHunterInputPages.submit().submit();
		waitActionPageCheckSqlOk(resultsPage);		
		jm.endTransaction(&quot;DH_lifecycle_0400_countUnusedPoliciesCurrentThread&quot;);				
		
		// direct access to required row-column table element by computing the id:
		int countUsedPoliciesCurrentThread = resultsPage.getCountForBreakdown(application, lifecycle, TestConstants.UNUSED); 
		LOG.debug( &quot;countUsedPoliciesCurrentThread : &quot; + countUsedPoliciesCurrentThread); 
		jm.userDataPoint(application + &quot;_This_Thread_Unused_Policy_Count&quot;, countUsedPoliciesCurrentThread);	

//		use next policy
		driver.get(dataHunterUrl + TestConstants.NEXT_POLICY_URL_PATH + &quot;?application=&quot; + application + &quot;&amp;pUseOrLookup=use&quot;);		
		dataHunterInputPages.lifecycle().type(lifecycle);
		dataHunterInputPages.useability().selectByVisibleText(TestConstants.UNUSED);
		dataHunterInputPages.selectOrder().selectByVisibleText(TestConstants.SELECT_MOST_RECENTLY_ADDED);
		
		jm.startTransaction(&quot;DH_lifecycle_0500_useNextPolicy&quot;);		
		dataHunterInputPages.submit().submit();
		waitActionPageCheckSqlOk(resultsPage);			
		jm.endTransaction(&quot;DH_lifecycle_0500_useNextPolicy&quot;);	
		
		if (LOG.isDebugEnabled() ) {LOG.debug(&quot;useNextPolicy: &quot; + application + &quot;-&quot; + lifecycle + &quot; : &quot; + resultsPage.identifier() );	}
		
		//HTML table demo.
		long used=0;
		long unused=0;
		
		driver.get(dataHunterUrl + TestConstants.PRINT_SELECTED_POLICIES_URL_PATH  + &quot;?application=&quot; + application);
		dataHunterInputPages.submit().waitUntilClickable();
		
		jm.startTransaction(&quot;DH_lifecycle_0600_displaySelectedPolicies&quot;);	
		dataHunterInputPages.submit().submit();
		waitActionPageCheckSqlOk(resultsPage);
		// demo how to extract a transaction time from with a running script 
		org.apache.jmeter.samplers.SampleResult sr_0600 = jm.endTransaction(&quot;DH_lifecycle_0600_displaySelectedPolicies&quot;);
		LOG.debug(&quot;Transaction &quot; + sr_0600.getSampleLabel() + &quot; ran at &quot; + sr_0600.getTimeStamp() + &quot; and took &quot; + sr_0600.getTime() + &quot; ms.&quot; );
		
		HtmlTable printSelectedPoliciesTable = resultsPage.printSelectedPoliciesTable();
		for (HtmlTableRow tableRow : printSelectedPoliciesTable.getHtmlTableRows()) {
			if (tableRow.getColumnNumberOfExpectedColumns(4, 8).getText().equals(&quot;USED&quot;))   used++;
			if (tableRow.getColumnNumberOfExpectedColumns(4, 8).getText().equals(&quot;UNUSED&quot;)) unused++;
		}	
		jm.userDataPoint(&quot;USED_count_html_demo&quot;,   used );				
		jm.userDataPoint(&quot;UNUSED_count_html_demo&quot;, unused );	
		LOG.debug(&quot;HTML demo: USED=&quot; + used + &quot;, UNUSED=&quot; + unused); 
		
// 		delete multiple policies (test cleanup - a duplicate of the initial delete policies transactions)
		jm.startTransaction(&quot;DH_lifecycle_0099_gotoDeleteMultiplePoliciesUrl&quot;);		
		driver.get(dataHunterUrl + TestConstants.DELETE_MULTIPLE_POLICIES_URL_PATH + &quot;?application=&quot; + application);
		dataHunterInputPages.lifecycle().waitUntilClickable();		
		jm.endTransaction(&quot;DH_lifecycle_0099_gotoDeleteMultiplePoliciesUrl&quot;);	
		
		dataHunterInputPages.lifecycle().type(lifecycle);
		
		jm.startTransaction(&quot;DH_lifecycle_0100_deleteMultiplePolicies&quot;);
		dataHunterInputPages.submit().submit();
		waitActionPageCheckSqlOk(new DatatHunterActionPages(driver));
		jm.endTransaction(&quot;DH_lifecycle_0100_deleteMultiplePolicies&quot;);	
		
//		jm.writeBufferedArtifacts();
	}


	private void waitActionPageCheckSqlOk(DatatHunterActionPages resultsPage) {
		String sqlResultText = resultsPage.sqlResult().getText();
		if (!&quot;PASS&quot;.equals(sqlResultText)) {
			throw new RuntimeException(&quot;SQL issue (&quot; + sqlResultText + &quot;) : &quot; +
						resultsPage.formatResultsMessage(resultsPage.getClass().getName()));
		}
	}
	

	@SuppressWarnings(&quot;unchecked&quot;)
	private synchronized void PrintSomeMsgOnceAtStartUp(String dataHunterUrl, WebDriver driver) {
		Properties sysprops = System.getProperties();
		if (!&quot;true&quot;.equals(sysprops.get(&quot;printedOnce&quot;)) ) {	
			LOG.info(&quot; Using DataHunter with Url &quot; + dataHunterUrl + &quot;/mark59-datahunter&quot;);
			Capabilities caps = ((ChromeDriver)driver).getCapabilities();
			LOG.info(&quot; Browser Name and Version : &quot; + caps.getBrowserName() + &quot; &quot; + caps.getBrowserVersion());
			if (&quot;chrome&quot;.equalsIgnoreCase(caps.getBrowserName()) &amp;&amp; caps.getCapability(&quot;chrome&quot;) != null ){
				LOG.info(&quot; Chrome Driver Version    : &quot; +  ((Map&lt;String, String&gt;)caps.getCapability(&quot;chrome&quot;)).get(&quot;chromedriverVersion&quot;));
			}
			sysprops.put(&quot;printedOnce&quot;, &quot;true&quot;);
		}
	}
}


// &gt;&gt; --------- COMMENT OUT THE NEXT THREE LINES ---------     (capitalization of the SampleResult variable in the next line is deliberate) 
//org.apache.jmeter.samplers.SampleResult SampleResult = new org.apache.jmeter.samplers.SampleResult();
//SampleResult.sampleStart();
//Log4jConfigurationHelper.init(Level.INFO) ;
// &lt;&lt; 

org.apache.jmeter.samplers.SampleResult testResults = new ThisScript().runSeleniumTest(KeepBrowserOpen.NEVER, true);
if (testResults != null) {
	for (org.apache.jmeter.samplers.SampleResult subResult : testResults.getSubResults()) {
		SampleResult.addSubResult(subResult, false);
	}
}
SampleResult.setDataType(&quot;PARENT&quot; );
SampleResult.setEndTime(0);

// &gt;&gt; --------- COMMENT OUT THE END BRACES BELOW --------- 
//}
//}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DemoDataHunterLifecyclePvtScriptUsingRestApiClient" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">20</stringProp>
        <stringProp name="ThreadGroup.delay">4</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="3599307">user</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1510253588">
              <stringProp name="2137029243">FirstUser</stringProp>
            </collectionProp>
            <collectionProp name="-1903122179">
              <stringProp name="-622625858">AddaSecondThread</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="DataHunterLifecyclePvtScriptUsingRestApiClient" enabled="true">
          <stringProp name="TestPlan.comments">default DATAHUNTER_URL set to  http://localhost:8081/mark59-datahunter</stringProp>
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="DATAHUNTER_URL" elementType="Argument">
                <stringProp name="Argument.name">DATAHUNTER_URL</stringProp>
                <stringProp name="Argument.value">http://localhost:8081/mark59-datahunter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DATAHUNTER_APPLICATION_ID_CLIENT_API" elementType="Argument">
                <stringProp name="Argument.name">DATAHUNTER_APPLICATION_ID_CLIENT_API</stringProp>
                <stringProp name="Argument.value">DATAHUNTER_PV_TEST_CLIENT_API</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FORCE_TXN_FAIL_PERCENT" elementType="Argument">
                <stringProp name="Argument.name">FORCE_TXN_FAIL_PERCENT</stringProp>
                <stringProp name="Argument.value">20</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="USER" elementType="Argument">
                <stringProp name="Argument.name">USER</stringProp>
                <stringProp name="Argument.value">${user}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CLEAN_DATA_AT_SCRIPT_END" elementType="Argument">
                <stringProp name="Argument.name">CLEAN_DATA_AT_SCRIPT_END</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="LOG_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">LOG_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="PRINT_RESULTS_SUMMARY" elementType="Argument">
                <stringProp name="Argument.name">PRINT_RESULTS_SUMMARY</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="___________________" elementType="Argument">
                <stringProp name="Argument.name">___________________</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="script build information: " elementType="Argument">
                <stringProp name="Argument.name">script build information: </stringProp>
                <stringProp name="Argument.value">using mark59-datahunter-api Version: 5.2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.mark59.datahunter.samples.scripts.DataHunterLifecyclePvtScriptUsingRestApiClient</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="TestPlan.comments">-- You would normally disable &apos;View Results Tree&apos; for a real test --</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report csv" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">Recommended Standard Config (default+hostname)  ** For LINUX Gui run, remove &quot;C:/&quot; in the Filename (you get a strange C: named directory otherwise!)  </stringProp>
        <stringProp name="filename">C:/Mark59_Runs/Jmeter_Results/DataHunter/DataHunterTestResults.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
